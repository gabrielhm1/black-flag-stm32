
ui.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004588  08004588  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004590  08004590  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000090  08004628  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004628  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000927c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000194e  00000000  00000000  0002933c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0002ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002b438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d86  00000000  00000000  0002bb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a28f  00000000  00000000  000408be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000784df  00000000  00000000  0004ab4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c302c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b60  00000000  00000000  000c307c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004158 	.word	0x08004158

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08004158 	.word	0x08004158

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <setupBLE>:
void sendInstruction (AtInstruction_t instruction, char* parameter);
char** str_split (char* a_str, const char a_delim);
int getSubstring (char *source, char *target,int from, int to);
void sendToLogger (char *msg);

void setupBLE(UART_HandleTypeDef *huartInterface, UART_HandleTypeDef *loggingInterface) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	huart = huartInterface;
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <setupBLE+0x38>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6013      	str	r3, [r2, #0]
	loggingHuart = loggingInterface;
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <setupBLE+0x3c>)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(huart, (uint8_t *) "AT+RESET/r/n", strlen("AT+RESET/r/n"), HAL_MAX_DELAY);
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <setupBLE+0x38>)
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e2:	220c      	movs	r2, #12
 80005e4:	4907      	ldr	r1, [pc, #28]	; (8000604 <setupBLE+0x40>)
 80005e6:	f001 fd84 	bl	80020f2 <HAL_UART_Transmit>
	sendInstruction(SET_PERMISSIONS, "11111");
 80005ea:	4907      	ldr	r1, [pc, #28]	; (8000608 <setupBLE+0x44>)
 80005ec:	2007      	movs	r0, #7
 80005ee:	f000 f80d 	bl	800060c <sendInstruction>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200000ac 	.word	0x200000ac
 8000600:	200000b0 	.word	0x200000b0
 8000604:	080041b4 	.word	0x080041b4
 8000608:	080041c4 	.word	0x080041c4

0800060c <sendInstruction>:

void sendInstruction (AtInstruction_t instruction, char* parameter) {
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	71fb      	strb	r3, [r7, #7]
	char *instructionPrefix = atInstructions[instruction];
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <sendInstruction+0x54>)
 800061c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000620:	60fb      	str	r3, [r7, #12]
	char *completeInstruction = (char*) malloc(30 * sizeof(char));
 8000622:	201e      	movs	r0, #30
 8000624:	f002 f9f4 	bl	8002a10 <malloc>
 8000628:	4603      	mov	r3, r0
 800062a:	60bb      	str	r3, [r7, #8]
	sprintf(completeInstruction, "%s%s\r\n", instructionPrefix, parameter);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	490c      	ldr	r1, [pc, #48]	; (8000664 <sendInstruction+0x58>)
 8000632:	68b8      	ldr	r0, [r7, #8]
 8000634:	f002 fe58 	bl	80032e8 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t *) completeInstruction, strlen(completeInstruction), HAL_MAX_DELAY);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <sendInstruction+0x5c>)
 800063a:	681c      	ldr	r4, [r3, #0]
 800063c:	68b8      	ldr	r0, [r7, #8]
 800063e:	f7ff fde7 	bl	8000210 <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064a:	68b9      	ldr	r1, [r7, #8]
 800064c:	4620      	mov	r0, r4
 800064e:	f001 fd50 	bl	80020f2 <HAL_UART_Transmit>
	free(completeInstruction);
 8000652:	68b8      	ldr	r0, [r7, #8]
 8000654:	f002 f9e4 	bl	8002a20 <free>
}
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	20000000 	.word	0x20000000
 8000664:	080041cc 	.word	0x080041cc
 8000668:	200000ac 	.word	0x200000ac

0800066c <setName>:

void setName (char *name) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b09c      	sub	sp, #112	; 0x70
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	char inputBuffer[100];
	sendInstruction(SET_NAME, name);
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff ffc8 	bl	800060c <sendInstruction>
	HAL_UART_Receive(huart, (uint8_t *) inputBuffer, 10, HAL_MAX_DELAY);
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <setName+0x44>)
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	f107 010c 	add.w	r1, r7, #12
 8000684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000688:	220a      	movs	r2, #10
 800068a:	f001 fdc4 	bl	8002216 <HAL_UART_Receive>
	HAL_UART_Transmit(loggingHuart, (uint8_t *) inputBuffer, 10, 4000);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <setName+0x48>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	f107 010c 	add.w	r1, r7, #12
 8000696:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800069a:	220a      	movs	r2, #10
 800069c:	f001 fd29 	bl	80020f2 <HAL_UART_Transmit>
	sendToLogger("Nomealterado /r/n");
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <setName+0x4c>)
 80006a2:	f000 f9f3 	bl	8000a8c <sendToLogger>

}
 80006a6:	bf00      	nop
 80006a8:	3770      	adds	r7, #112	; 0x70
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000ac 	.word	0x200000ac
 80006b4:	200000b0 	.word	0x200000b0
 80006b8:	080041d4 	.word	0x080041d4

080006bc <setRole>:

void setRole (Role_t role) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
	char roleString[2];
	itoa(role, roleString, 10);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	f107 010c 	add.w	r1, r7, #12
 80006cc:	220a      	movs	r2, #10
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f99c 	bl	8002a0c <itoa>
	sendInstruction(SET_ROLE, roleString);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ff96 	bl	800060c <sendInstruction>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <masterScanForSlaves>:
	char powerString[5];
	gcvt(power, 2, powerString);
	sendInstruction(SET_TRANSMITTING_POWER, powerString);
}

Device_t* masterScanForSlaves () {
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b0a6      	sub	sp, #152	; 0x98
 80006ec:	af00      	add	r7, sp, #0

	char inputBuffer[100];
	char *allText = (char *) malloc(1000 * sizeof(char));
 80006ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f2:	f002 f98d 	bl	8002a10 <malloc>
 80006f6:	4603      	mov	r3, r0
 80006f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	// Send the scan request
	sendToLogger("About to inquire \r\n");
 80006fc:	486c      	ldr	r0, [pc, #432]	; (80008b0 <masterScanForSlaves+0x1c8>)
 80006fe:	f000 f9c5 	bl	8000a8c <sendToLogger>
	sendInstruction(MASTER_SCAN_FOR_SLAVES, "");
 8000702:	496c      	ldr	r1, [pc, #432]	; (80008b4 <masterScanForSlaves+0x1cc>)
 8000704:	2005      	movs	r0, #5
 8000706:	f7ff ff81 	bl	800060c <sendInstruction>
	sendToLogger("Inquired \r\n");
 800070a:	486b      	ldr	r0, [pc, #428]	; (80008b8 <masterScanForSlaves+0x1d0>)
 800070c:	f000 f9be 	bl	8000a8c <sendToLogger>
	// If we don't have this, the program hangs during the reception of data.
	char *unused1 = "Unused";
 8000710:	4b6a      	ldr	r3, [pc, #424]	; (80008bc <masterScanForSlaves+0x1d4>)
 8000712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	char *unused2 = "Unused";
 8000716:	4b69      	ldr	r3, [pc, #420]	; (80008bc <masterScanForSlaves+0x1d4>)
 8000718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char *unused3 = "Unused";
 800071c:	4b67      	ldr	r3, [pc, #412]	; (80008bc <masterScanForSlaves+0x1d4>)
 800071e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	// Receive the scan answer
	while(!((strstr(allText, "STOP:SCAN") != NULL))) {
 8000722:	e011      	b.n	8000748 <masterScanForSlaves+0x60>
		HAL_UART_Receive(huart, (uint8_t *) inputBuffer, 1, 4000);
 8000724:	4b66      	ldr	r3, [pc, #408]	; (80008c0 <masterScanForSlaves+0x1d8>)
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	1d39      	adds	r1, r7, #4
 800072a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800072e:	2201      	movs	r2, #1
 8000730:	f001 fd71 	bl	8002216 <HAL_UART_Receive>
		strcat(allText, inputBuffer);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800073c:	f002 fdf4 	bl	8003328 <strcat>
		sendToLogger(inputBuffer);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f9a2 	bl	8000a8c <sendToLogger>
	while(!((strstr(allText, "STOP:SCAN") != NULL))) {
 8000748:	495e      	ldr	r1, [pc, #376]	; (80008c4 <masterScanForSlaves+0x1dc>)
 800074a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800074e:	f002 fe24 	bl	800339a <strstr>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0e5      	beq.n	8000724 <masterScanForSlaves+0x3c>

//		sendInstruction(MASTER_SCAN_FOR_SLAVES, "");
	}
	sendToLogger("Received \r\n");
 8000758:	485b      	ldr	r0, [pc, #364]	; (80008c8 <masterScanForSlaves+0x1e0>)
 800075a:	f000 f997 	bl	8000a8c <sendToLogger>
	sendToLogger(allText);
 800075e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000762:	f000 f993 	bl	8000a8c <sendToLogger>
	sendToLogger("\r\nRetransmitted \r\n");
 8000766:	4859      	ldr	r0, [pc, #356]	; (80008cc <masterScanForSlaves+0x1e4>)
 8000768:	f000 f990 	bl	8000a8c <sendToLogger>
	// Break the scan into lines:
	char** lines = str_split(allText, '\n');
 800076c:	210a      	movs	r1, #10
 800076e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000772:	f000 f8ad 	bl	80008d0 <str_split>
 8000776:	67f8      	str	r0, [r7, #124]	; 0x7c
	// First line contains trash. We have to remove it.
	char *firstLine = lines[0];
 8000778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	67bb      	str	r3, [r7, #120]	; 0x78
	char *e;
	int index;
	e = strchr(firstLine, '+');
 800077e:	212b      	movs	r1, #43	; 0x2b
 8000780:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000782:	f002 fde0 	bl	8003346 <strchr>
 8000786:	6778      	str	r0, [r7, #116]	; 0x74
	index = (int)(e - firstLine);
 8000788:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800078a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	673b      	str	r3, [r7, #112]	; 0x70
	getSubstring(firstLine, firstLine, index, strlen(firstLine));
 8000790:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000792:	f7ff fd3d 	bl	8000210 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800079a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800079c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800079e:	f000 f921 	bl	80009e4 <getSubstring>

	// Breaking the lines into tokens and creating the struct
	size_t nbOfEntries = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	while (*(lines + nbOfEntries) != 0) nbOfEntries++;
 80007a8:	e004      	b.n	80007b4 <masterScanForSlaves+0xcc>
 80007aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007ae:	3301      	adds	r3, #1
 80007b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80007b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f2      	bne.n	80007aa <masterScanForSlaves+0xc2>
	nbOfEntries--;
 80007c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007c8:	3b01      	subs	r3, #1
 80007ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	Device_t *entries = (Device_t *) malloc(nbOfEntries * sizeof(Device_t));
 80007ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f91b 	bl	8002a10 <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; i < nbOfEntries - 1; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80007e4:	e057      	b.n	8000896 <masterScanForSlaves+0x1ae>
		char **tokens = str_split(lines[i], ',');
 80007e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80007ee:	4413      	add	r3, r2
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	212c      	movs	r1, #44	; 0x2c
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f86b 	bl	80008d0 <str_split>
 80007fa:	66b8      	str	r0, [r7, #104]	; 0x68
		getSubstring(tokens[0], tokens[0], 7, strlen(tokens[0]));
 80007fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007fe:	681c      	ldr	r4, [r3, #0]
 8000800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000802:	681d      	ldr	r5, [r3, #0]
 8000804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd01 	bl	8000210 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	2207      	movs	r2, #7
 8000812:	4629      	mov	r1, r5
 8000814:	4620      	mov	r0, r4
 8000816:	f000 f8e5 	bl	80009e4 <getSubstring>
		getSubstring(tokens[2], tokens[2], 0, strlen(tokens[2])-2);
 800081a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800081c:	3308      	adds	r3, #8
 800081e:	681c      	ldr	r4, [r3, #0]
 8000820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000822:	3308      	adds	r3, #8
 8000824:	681d      	ldr	r5, [r3, #0]
 8000826:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000828:	3308      	adds	r3, #8
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fcef 	bl	8000210 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	3b02      	subs	r3, #2
 8000836:	2200      	movs	r2, #0
 8000838:	4629      	mov	r1, r5
 800083a:	4620      	mov	r0, r4
 800083c:	f000 f8d2 	bl	80009e4 <getSubstring>

		entries[i].index = i+1;
 8000840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000844:	011b      	lsls	r3, r3, #4
 8000846:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000848:	4413      	add	r3, r2
 800084a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800084e:	3201      	adds	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
		entries[i].mac = tokens[0];
 8000852:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800085a:	4413      	add	r3, r2
 800085c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800085e:	6812      	ldr	r2, [r2, #0]
 8000860:	605a      	str	r2, [r3, #4]
		entries[i].signalStrength = atoi(tokens[1]);
 8000862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000864:	3304      	adds	r3, #4
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000870:	18d4      	adds	r4, r2, r3
 8000872:	4608      	mov	r0, r1
 8000874:	f002 f872 	bl	800295c <atoi>
 8000878:	4603      	mov	r3, r0
 800087a:	60a3      	str	r3, [r4, #8]
		entries[i].name = tokens[2];
 800087c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000880:	011b      	lsls	r3, r3, #4
 8000882:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000884:	4413      	add	r3, r2
 8000886:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000888:	6892      	ldr	r2, [r2, #8]
 800088a:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < nbOfEntries - 1; i++) {
 800088c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000890:	3301      	adds	r3, #1
 8000892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000896:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d8a0      	bhi.n	80007e6 <masterScanForSlaves+0xfe>
	}

	return entries;
 80008a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3798      	adds	r7, #152	; 0x98
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bdb0      	pop	{r4, r5, r7, pc}
 80008ae:	bf00      	nop
 80008b0:	080041e8 	.word	0x080041e8
 80008b4:	080041fc 	.word	0x080041fc
 80008b8:	08004200 	.word	0x08004200
 80008bc:	0800420c 	.word	0x0800420c
 80008c0:	200000ac 	.word	0x200000ac
 80008c4:	08004214 	.word	0x08004214
 80008c8:	08004220 	.word	0x08004220
 80008cc:	0800422c 	.word	0x0800422c

080008d0 <str_split>:
void connectMasterToSlaveFromMACAddress (char *mac) {
	sendInstruction(MASTER_CONNECT_SLAVE, mac);
}

char** str_split(char* a_str, const char a_delim)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b08b      	sub	sp, #44	; 0x2c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
    char** result    = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	613b      	str	r3, [r7, #16]
    size_t count     = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    char* tmp        = a_str;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	623b      	str	r3, [r7, #32]
    char* last_comma = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
    char delim[2];
    delim[0] = a_delim;
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	733b      	strb	r3, [r7, #12]
    delim[1] = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	737b      	strb	r3, [r7, #13]

    /* Count how many elements will be extracted. */
    while (*tmp)
 80008f4:	e00c      	b.n	8000910 <str_split+0x40>
    {
        if (a_delim == *tmp)
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	78fa      	ldrb	r2, [r7, #3]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d104      	bne.n	800090a <str_split+0x3a>
        {
            count++;
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	3301      	adds	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
            last_comma = tmp;
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	61fb      	str	r3, [r7, #28]
        }
        tmp++;
 800090a:	6a3b      	ldr	r3, [r7, #32]
 800090c:	3301      	adds	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
    while (*tmp)
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1ee      	bne.n	80008f6 <str_split+0x26>
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff fc79 	bl	8000210 <strlen>
 800091e:	4603      	mov	r3, r0
 8000920:	3b01      	subs	r3, #1
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	429a      	cmp	r2, r3
 800092a:	bf34      	ite	cc
 800092c:	2301      	movcc	r3, #1
 800092e:	2300      	movcs	r3, #0
 8000930:	b2db      	uxtb	r3, r3
 8000932:	461a      	mov	r2, r3
 8000934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000936:	4413      	add	r3, r2
 8000938:	627b      	str	r3, [r7, #36]	; 0x24

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	3301      	adds	r3, #1
 800093e:	627b      	str	r3, [r7, #36]	; 0x24

    result = malloc(sizeof(char*) * count);
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4618      	mov	r0, r3
 8000946:	f002 f863 	bl	8002a10 <malloc>
 800094a:	4603      	mov	r3, r0
 800094c:	613b      	str	r3, [r7, #16]

    if (result)
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d039      	beq.n	80009c8 <str_split+0xf8>
    {
        size_t idx  = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
        char* token = strtok(a_str, delim);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f002 fd32 	bl	80033c8 <strtok>
 8000964:	6178      	str	r0, [r7, #20]

        while (token)
 8000966:	e01b      	b.n	80009a0 <str_split+0xd0>
        {
            assert(idx < count);
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096c:	429a      	cmp	r2, r3
 800096e:	d305      	bcc.n	800097c <str_split+0xac>
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <str_split+0x104>)
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <str_split+0x108>)
 8000974:	21be      	movs	r1, #190	; 0xbe
 8000976:	4819      	ldr	r0, [pc, #100]	; (80009dc <str_split+0x10c>)
 8000978:	f001 ffd2 	bl	8002920 <__assert_func>
            *(result + idx++) = strdup(token);
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	61ba      	str	r2, [r7, #24]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	18d4      	adds	r4, r2, r3
 8000988:	6978      	ldr	r0, [r7, #20]
 800098a:	f002 fce9 	bl	8003360 <strdup>
 800098e:	4603      	mov	r3, r0
 8000990:	6023      	str	r3, [r4, #0]
            token = strtok(0, delim);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	2000      	movs	r0, #0
 800099a:	f002 fd15 	bl	80033c8 <strtok>
 800099e:	6178      	str	r0, [r7, #20]
        while (token)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d1e0      	bne.n	8000968 <str_split+0x98>
        }
        assert(idx == count - 1);
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	3b01      	subs	r3, #1
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d005      	beq.n	80009bc <str_split+0xec>
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <str_split+0x110>)
 80009b2:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <str_split+0x108>)
 80009b4:	21c2      	movs	r1, #194	; 0xc2
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <str_split+0x10c>)
 80009b8:	f001 ffb2 	bl	8002920 <__assert_func>
        *(result + idx) = 0;
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4413      	add	r3, r2
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
    }

    return result;
 80009c8:	693b      	ldr	r3, [r7, #16]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	372c      	adds	r7, #44	; 0x2c
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd90      	pop	{r4, r7, pc}
 80009d2:	bf00      	nop
 80009d4:	08004240 	.word	0x08004240
 80009d8:	080042f4 	.word	0x080042f4
 80009dc:	0800424c 	.word	0x0800424c
 80009e0:	08004274 	.word	0x08004274

080009e4 <getSubstring>:

int  getSubstring(char *source, char *target,int from, int to)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
 80009f0:	603b      	str	r3, [r7, #0]
	int length=0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
	int i=0,j=0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]

	//get length
	while(source[i++]!='\0')
 80009fe:	e002      	b.n	8000a06 <getSubstring+0x22>
		length++;
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	3301      	adds	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
	while(source[i++]!='\0')
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	1c5a      	adds	r2, r3, #1
 8000a0a:	61ba      	str	r2, [r7, #24]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f3      	bne.n	8000a00 <getSubstring+0x1c>

	if(from<0 || from>length){
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	db03      	blt.n	8000a26 <getSubstring+0x42>
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dd04      	ble.n	8000a30 <getSubstring+0x4c>
		printf("Invalid \'from\' index\n");
 8000a26:	4817      	ldr	r0, [pc, #92]	; (8000a84 <getSubstring+0xa0>)
 8000a28:	f002 fc46 	bl	80032b8 <puts>
		return 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e025      	b.n	8000a7c <getSubstring+0x98>
	}
	if(to>length){
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dd04      	ble.n	8000a42 <getSubstring+0x5e>
		printf("Invalid \'to\' index\n");
 8000a38:	4813      	ldr	r0, [pc, #76]	; (8000a88 <getSubstring+0xa4>)
 8000a3a:	f002 fc3d 	bl	80032b8 <puts>
		return 1;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e01c      	b.n	8000a7c <getSubstring+0x98>
	}

	for(i=from,j=0;i<=to;i++,j++){
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e00d      	b.n	8000a68 <getSubstring+0x84>
		target[j]=source[i];
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	441a      	add	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	440b      	add	r3, r1
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	701a      	strb	r2, [r3, #0]
	for(i=from,j=0;i<=to;i++,j++){
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dded      	ble.n	8000a4c <getSubstring+0x68>
	}

	//assign NULL at the end of string
	target[j]='\0';
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	4413      	add	r3, r2
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]

	return 0;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08004288 	.word	0x08004288
 8000a88:	080042a0 	.word	0x080042a0

08000a8c <sendToLogger>:

void sendToLogger (char *msg) {
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(loggingHuart, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <sendToLogger+0x2c>)
 8000a96:	681c      	ldr	r4, [r3, #0]
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff fbb9 	bl	8000210 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f001 fb22 	bl	80020f2 <HAL_UART_Transmit>
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000b0 	.word	0x200000b0

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b09d      	sub	sp, #116	; 0x74
 8000ac0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f000 fb3f 	bl	8001144 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f839 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f000 f8f7 	bl	8000cbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ace:	f000 f8cb 	bl	8000c68 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000ad2:	f000 f89f 	bl	8000c14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setupBLE(&huart1, &huart2);
 8000ad6:	4915      	ldr	r1, [pc, #84]	; (8000b2c <main+0x70>)
 8000ad8:	4815      	ldr	r0, [pc, #84]	; (8000b30 <main+0x74>)
 8000ada:	f7ff fd73 	bl	80005c4 <setupBLE>
  setName("myBLEM");
 8000ade:	4815      	ldr	r0, [pc, #84]	; (8000b34 <main+0x78>)
 8000ae0:	f7ff fdc4 	bl	800066c <setName>
//  setBeaconUuid("FDB50693A4E24FB1AFCFC6EB07647825");
  setRole(MASTER);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fde9 	bl	80006bc <setRole>
  Device_t *devices = masterScanForSlaves(&huart2);
 8000aea:	4810      	ldr	r0, [pc, #64]	; (8000b2c <main+0x70>)
 8000aec:	f7ff fdfc 	bl	80006e8 <masterScanForSlaves>
 8000af0:	6678      	str	r0, [r7, #100]	; 0x64
  char message[100];
//  char *message = "Roi \r\n";

  sprintf(message, "Device %d has mac %s, signal strength %d and name %s \r\n", devices[0].index, devices[0].mac, devices[0].signalStrength, devices[0].name);
 8000af2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000af4:	6819      	ldr	r1, [r3, #0]
 8000af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000af8:	685c      	ldr	r4, [r3, #4]
 8000afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b00:	68d2      	ldr	r2, [r2, #12]
 8000b02:	4638      	mov	r0, r7
 8000b04:	9201      	str	r2, [sp, #4]
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	4623      	mov	r3, r4
 8000b0a:	460a      	mov	r2, r1
 8000b0c:	490a      	ldr	r1, [pc, #40]	; (8000b38 <main+0x7c>)
 8000b0e:	f002 fbeb 	bl	80032e8 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) message, strlen (message), HAL_MAX_DELAY);
 8000b12:	463b      	mov	r3, r7
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fb7b 	bl	8000210 <strlen>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4639      	mov	r1, r7
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b24:	4801      	ldr	r0, [pc, #4]	; (8000b2c <main+0x70>)
 8000b26:	f001 fae4 	bl	80020f2 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000b2a:	e7fe      	b.n	8000b2a <main+0x6e>
 8000b2c:	200000f8 	.word	0x200000f8
 8000b30:	200000b4 	.word	0x200000b4
 8000b34:	080042b4 	.word	0x080042b4
 8000b38:	080042bc 	.word	0x080042bc

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	; 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2234      	movs	r2, #52	; 0x34
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 ff70 	bl	8002a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <SystemClock_Config+0xd4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <SystemClock_Config+0xd4>)
 8000b86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <SystemClock_Config+0xd4>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bac:	2310      	movs	r3, #16
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 ffc2 	bl	8001b50 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bd2:	f000 f8e1 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fd8c 	bl	8001710 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bfe:	f000 f8cb 	bl	8000d98 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	; 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <MX_USART1_UART_Init+0x50>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	f001 fa04 	bl	8002058 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c56:	f000 f89f 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000b4 	.word	0x200000b4
 8000c64:	40011000 	.word	0x40011000

08000c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_USART2_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f001 f9da 	bl	8002058 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f000 f875 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000f8 	.word	0x200000f8
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a2c      	ldr	r2, [pc, #176]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <MX_GPIO_Init+0xd0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_GPIO_Init+0xd4>)
 8000d48:	f000 fcc8 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_GPIO_Init+0xd8>)
 8000d64:	f000 fb46 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d68:	2320      	movs	r3, #32
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4804      	ldr	r0, [pc, #16]	; (8000d90 <MX_GPIO_Init+0xd4>)
 8000d80:	f000 fb38 	bl	80013f4 <HAL_GPIO_Init>

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020800 	.word	0x40020800

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000de2:	2007      	movs	r0, #7
 8000de4:	f000 fad2 	bl	800138c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a32      	ldr	r2, [pc, #200]	; (8000edc <HAL_UART_MspInit+0xe8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d12d      	bne.n	8000e72 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a30      	ldr	r2, [pc, #192]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e60:	2307      	movs	r3, #7
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000e6c:	f000 fac2 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e70:	e030      	b.n	8000ed4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <HAL_UART_MspInit+0xf4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d12b      	bne.n	8000ed4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_UART_MspInit+0xec>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_UART_MspInit+0xf0>)
 8000ed0:	f000 fa90 	bl	80013f4 <HAL_GPIO_Init>
}
 8000ed4:	bf00      	nop
 8000ed6:	3730      	adds	r7, #48	; 0x30
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40004400 	.word	0x40004400

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f000 f956 	bl	80011e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
	return 1;
 8000f44:	2301      	movs	r3, #1
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_kill>:

int _kill(int pid, int sig)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f5a:	f001 fd03 	bl	8002964 <__errno>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2216      	movs	r2, #22
 8000f62:	601a      	str	r2, [r3, #0]
	return -1;
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <_exit>:

void _exit (int status)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ffe7 	bl	8000f50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f82:	e7fe      	b.n	8000f82 <_exit+0x12>

08000f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00a      	b.n	8000fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f96:	f3af 8000 	nop.w
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf0      	blt.n	8000f96 <_read+0x12>
	}

return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e009      	b.n	8000fe4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	60ba      	str	r2, [r7, #8]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	dbf1      	blt.n	8000fd0 <_write+0x12>
	}
	return len;
 8000fec:	687b      	ldr	r3, [r7, #4]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_close>:

int _close(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101e:	605a      	str	r2, [r3, #4]
	return 0;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <_isatty>:

int _isatty(int file)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
	return 1;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f001 fc68 	bl	8002964 <__errno>
 8001094:	4603      	mov	r3, r0
 8001096:	220c      	movs	r2, #12
 8001098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20008000 	.word	0x20008000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	2000013c 	.word	0x2000013c
 80010c8:	20000158 	.word	0x20000158

080010cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f6:	490e      	ldr	r1, [pc, #56]	; (8001130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800110c:	4c0b      	ldr	r4, [pc, #44]	; (800113c <LoopFillZerobss+0x26>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800111a:	f7ff ffd7 	bl	80010cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111e:	f001 fc39 	bl	8002994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001122:	f7ff fccb 	bl	8000abc <main>
  bx  lr    
 8001126:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001128:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001134:	08004598 	.word	0x08004598
  ldr r2, =_sbss
 8001138:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800113c:	20000154 	.word	0x20000154

08001140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC_IRQHandler>
	...

08001144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_Init+0x40>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_Init+0x40>)
 800115a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_Init+0x40>)
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116c:	2003      	movs	r0, #3
 800116e:	f000 f90d 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f808 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001178:	f7ff fe14 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00

08001188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x54>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x58>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119e:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 f917 	bl	80013da <HAL_SYSTICK_Config>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00e      	b.n	80011d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d80a      	bhi.n	80011d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c4:	f000 f8ed 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c8:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_InitTick+0x5c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000020 	.word	0x20000020
 80011e0:	20000028 	.word	0x20000028
 80011e4:	20000024 	.word	0x20000024

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000028 	.word	0x20000028
 800120c:	20000140 	.word	0x20000140

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000140 	.word	0x20000140

08001228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001244:	4013      	ands	r3, r2
 8001246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x44>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <__NVIC_GetPriorityGrouping+0x18>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	f003 0307 	and.w	r3, r3, #7
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff47 	bl	8001228 <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff5c 	bl	8001270 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff8e 	bl	80012e0 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffb0 	bl	8001348 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e14d      	b.n	80016ac <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 813c 	bne.w	80016a6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	2b02      	cmp	r3, #2
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d017      	beq.n	80014e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d123      	bne.n	8001538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 8096 	beq.w	80016a6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a50      	ldr	r2, [pc, #320]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a4c      	ldr	r2, [pc, #304]	; (80016c8 <HAL_GPIO_Init+0x2d4>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a43      	ldr	r2, [pc, #268]	; (80016cc <HAL_GPIO_Init+0x2d8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_GPIO_Init+0x1ea>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a42      	ldr	r2, [pc, #264]	; (80016d0 <HAL_GPIO_Init+0x2dc>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x1e6>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a41      	ldr	r2, [pc, #260]	; (80016d4 <HAL_GPIO_Init+0x2e0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_GPIO_Init+0x1e2>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e004      	b.n	80015e0 <HAL_GPIO_Init+0x1ec>
 80015d6:	2307      	movs	r3, #7
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x1ec>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x1ec>
 80015de:	2300      	movs	r3, #0
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	4093      	lsls	r3, r2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f0:	4935      	ldr	r1, [pc, #212]	; (80016c8 <HAL_GPIO_Init+0x2d4>)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_GPIO_Init+0x2e4>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001622:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <HAL_GPIO_Init+0x2e4>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_GPIO_Init+0x2e4>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800164c:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <HAL_GPIO_Init+0x2e4>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_GPIO_Init+0x2e4>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001676:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <HAL_GPIO_Init+0x2e4>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_GPIO_Init+0x2e4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_GPIO_Init+0x2e4>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	f67f aeae 	bls.w	8001410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40013c00 	.word	0x40013c00

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0cc      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d90c      	bls.n	800174c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b8      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	494d      	ldr	r1, [pc, #308]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d044      	beq.n	8001830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d119      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e067      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4934      	ldr	r1, [pc, #208]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001800:	f7ff fd06 	bl	8001210 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff fd02 	bl	8001210 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e04f      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001830:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d20c      	bcs.n	8001858 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e032      	b.n	80018be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4916      	ldr	r1, [pc, #88]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001896:	f000 f821 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	490a      	ldr	r1, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	5ccb      	ldrb	r3, [r1, r3]
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1c8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fc66 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	08004300 	.word	0x08004300
 80018d4:	20000020 	.word	0x20000020
 80018d8:	20000024 	.word	0x20000024

080018dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e0:	b094      	sub	sp, #80	; 0x50
 80018e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
 80018e8:	2300      	movs	r3, #0
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018ec:	2300      	movs	r3, #0
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f4:	4b79      	ldr	r3, [pc, #484]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d00d      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x40>
 8001900:	2b08      	cmp	r3, #8
 8001902:	f200 80e1 	bhi.w	8001ac8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x34>
 800190a:	2b04      	cmp	r3, #4
 800190c:	d003      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x3a>
 800190e:	e0db      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b73      	ldr	r3, [pc, #460]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001914:	e0db      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001916:	4b73      	ldr	r3, [pc, #460]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800191a:	e0d8      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191c:	4b6f      	ldr	r3, [pc, #444]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d063      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	2200      	movs	r2, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
 800193c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800193e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
 8001946:	2300      	movs	r3, #0
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
 800194a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800194e:	4622      	mov	r2, r4
 8001950:	462b      	mov	r3, r5
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	0159      	lsls	r1, r3, #5
 800195c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001960:	0150      	lsls	r0, r2, #5
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4621      	mov	r1, r4
 8001968:	1a51      	subs	r1, r2, r1
 800196a:	6139      	str	r1, [r7, #16]
 800196c:	4629      	mov	r1, r5
 800196e:	eb63 0301 	sbc.w	r3, r3, r1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001980:	4659      	mov	r1, fp
 8001982:	018b      	lsls	r3, r1, #6
 8001984:	4651      	mov	r1, sl
 8001986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800198a:	4651      	mov	r1, sl
 800198c:	018a      	lsls	r2, r1, #6
 800198e:	4651      	mov	r1, sl
 8001990:	ebb2 0801 	subs.w	r8, r2, r1
 8001994:	4659      	mov	r1, fp
 8001996:	eb63 0901 	sbc.w	r9, r3, r1
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ae:	4690      	mov	r8, r2
 80019b0:	4699      	mov	r9, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	eb18 0303 	adds.w	r3, r8, r3
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	462b      	mov	r3, r5
 80019bc:	eb49 0303 	adc.w	r3, r9, r3
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ce:	4629      	mov	r1, r5
 80019d0:	024b      	lsls	r3, r1, #9
 80019d2:	4621      	mov	r1, r4
 80019d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019d8:	4621      	mov	r1, r4
 80019da:	024a      	lsls	r2, r1, #9
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e2:	2200      	movs	r2, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019ec:	f7fe fc68 	bl	80002c0 <__aeabi_uldivmod>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4613      	mov	r3, r2
 80019f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019f8:	e058      	b.n	8001aac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b38      	ldr	r3, [pc, #224]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	2200      	movs	r2, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	4611      	mov	r1, r2
 8001a06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a0a:	623b      	str	r3, [r7, #32]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a14:	4642      	mov	r2, r8
 8001a16:	464b      	mov	r3, r9
 8001a18:	f04f 0000 	mov.w	r0, #0
 8001a1c:	f04f 0100 	mov.w	r1, #0
 8001a20:	0159      	lsls	r1, r3, #5
 8001a22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a26:	0150      	lsls	r0, r2, #5
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4641      	mov	r1, r8
 8001a2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a32:	4649      	mov	r1, r9
 8001a34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a50:	eb63 050b 	sbc.w	r5, r3, fp
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	00eb      	lsls	r3, r5, #3
 8001a5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a62:	00e2      	lsls	r2, r4, #3
 8001a64:	4614      	mov	r4, r2
 8001a66:	461d      	mov	r5, r3
 8001a68:	4643      	mov	r3, r8
 8001a6a:	18e3      	adds	r3, r4, r3
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	464b      	mov	r3, r9
 8001a70:	eb45 0303 	adc.w	r3, r5, r3
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a82:	4629      	mov	r1, r5
 8001a84:	028b      	lsls	r3, r1, #10
 8001a86:	4621      	mov	r1, r4
 8001a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a8c:	4621      	mov	r1, r4
 8001a8e:	028a      	lsls	r2, r1, #10
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a96:	2200      	movs	r2, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	61fa      	str	r2, [r7, #28]
 8001a9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa0:	f7fe fc0e 	bl	80002c0 <__aeabi_uldivmod>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_GetSysClockFreq+0x200>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ac6:	e002      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3750      	adds	r7, #80	; 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	00f42400 	.word	0x00f42400
 8001ae4:	007a1200 	.word	0x007a1200

08001ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_GetHCLKFreq+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000020 	.word	0x20000020

08001b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b04:	f7ff fff0 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0a9b      	lsrs	r3, r3, #10
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4903      	ldr	r1, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08004310 	.word	0x08004310

08001b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b2c:	f7ff ffdc 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0b5b      	lsrs	r3, r3, #13
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	08004310 	.word	0x08004310

08001b50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e273      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d075      	beq.n	8001c5a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d00c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b85      	ldr	r3, [pc, #532]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d112      	bne.n	8001bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b86:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b92:	d10b      	bne.n	8001bac <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	4b7e      	ldr	r3, [pc, #504]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d05b      	beq.n	8001c58 <HAL_RCC_OscConfig+0x108>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d157      	bne.n	8001c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e24e      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x74>
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a75      	ldr	r2, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xb0>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x98>
 8001bce:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6f      	ldr	r2, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b6d      	ldr	r3, [pc, #436]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6c      	ldr	r2, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xb0>
 8001be8:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a68      	ldr	r2, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a65      	ldr	r2, [pc, #404]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb02 	bl	8001210 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fafe 	bl	8001210 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e213      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b5b      	ldr	r3, [pc, #364]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xc0>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff faee 	bl	8001210 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff faea 	bl	8001210 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1ff      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b51      	ldr	r3, [pc, #324]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0xe8>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x152>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e1d3      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4937      	ldr	r1, [pc, #220]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e03a      	b.n	8001d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_RCC_OscConfig+0x244>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff faa3 	bl	8001210 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff fa9f 	bl	8001210 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1b4      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4925      	ldr	r1, [pc, #148]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_OscConfig+0x244>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fa82 	bl	8001210 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fa7e 	bl	8001210 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e193      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d036      	beq.n	8001da8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d016      	beq.n	8001d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_RCC_OscConfig+0x248>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff fa62 	bl	8001210 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fa5e 	bl	8001210 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e173      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_OscConfig+0x240>)
 8001d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x200>
 8001d6e:	e01b      	b.n	8001da8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_OscConfig+0x248>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff fa4b 	bl	8001210 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	e00e      	b.n	8001d9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fa47 	bl	8001210 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d907      	bls.n	8001d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e15c      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
 8001d90:	40023800 	.word	0x40023800
 8001d94:	42470000 	.word	0x42470000
 8001d98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1ea      	bne.n	8001d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 8097 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b83      	ldr	r3, [pc, #524]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a7e      	ldr	r2, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b7c      	ldr	r3, [pc, #496]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b79      	ldr	r3, [pc, #484]	; (8001fcc <HAL_RCC_OscConfig+0x47c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d118      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x47c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x47c>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fa07 	bl	8001210 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7ff fa03 	bl	8001210 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e118      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x47c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x2ea>
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	4a65      	ldr	r2, [pc, #404]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6713      	str	r3, [r2, #112]	; 0x70
 8001e38:	e01c      	b.n	8001e74 <HAL_RCC_OscConfig+0x324>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x30c>
 8001e42:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	4a60      	ldr	r2, [pc, #384]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4e:	4b5e      	ldr	r3, [pc, #376]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	4a5d      	ldr	r2, [pc, #372]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0x324>
 8001e5c:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	4a59      	ldr	r2, [pc, #356]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a56      	ldr	r2, [pc, #344]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e6e:	f023 0304 	bic.w	r3, r3, #4
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d015      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff f9c8 	bl	8001210 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff f9c4 	bl	8001210 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0d7      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0ee      	beq.n	8001e84 <HAL_RCC_OscConfig+0x334>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff f9b2 	bl	8001210 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f9ae 	bl	8001210 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0c1      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec6:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ee      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	4a3a      	ldr	r2, [pc, #232]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80ad 	beq.w	8002048 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d060      	beq.n	8001fbc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d145      	bne.n	8001f8e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_RCC_OscConfig+0x480>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f982 	bl	8001210 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f97e 	bl	8001210 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e093      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	3b01      	subs	r3, #1
 8001f48:	041b      	lsls	r3, r3, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	071b      	lsls	r3, r3, #28
 8001f5a:	491b      	ldr	r1, [pc, #108]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x480>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff f953 	bl	8001210 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff f94f 	bl	8001210 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e064      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x41e>
 8001f8c:	e05c      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_RCC_OscConfig+0x480>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f93c 	bl	8001210 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff f938 	bl	8001210 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e04d      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_RCC_OscConfig+0x478>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x44c>
 8001fba:	e045      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e040      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d030      	beq.n	8002044 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d129      	bne.n	8002044 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d122      	bne.n	8002044 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800200a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	4293      	cmp	r3, r2
 800200e:	d119      	bne.n	8002044 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d10f      	bne.n	8002044 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e03f      	b.n	80020ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe feb8 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	; 0x24
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800209a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f9cb 	bl	8002438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2220      	movs	r2, #32
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b08a      	sub	sp, #40	; 0x28
 80020f6:	af02      	add	r7, sp, #8
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	d17c      	bne.n	800220c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_UART_Transmit+0x2c>
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e075      	b.n	800220e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_UART_Transmit+0x3e>
 800212c:	2302      	movs	r3, #2
 800212e:	e06e      	b.n	800220e <HAL_UART_Transmit+0x11c>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2221      	movs	r2, #33	; 0x21
 8002142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002146:	f7ff f863 	bl	8001210 <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	88fa      	ldrh	r2, [r7, #6]
 8002156:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002160:	d108      	bne.n	8002174 <HAL_UART_Transmit+0x82>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d104      	bne.n	8002174 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	e003      	b.n	800217c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002184:	e02a      	b.n	80021dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2200      	movs	r2, #0
 800218e:	2180      	movs	r1, #128	; 0x80
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f8e2 	bl	800235a <UART_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e036      	b.n	800220e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10b      	bne.n	80021be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3302      	adds	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	e007      	b.n	80021ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	3301      	adds	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1cf      	bne.n	8002186 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2200      	movs	r2, #0
 80021ee:	2140      	movs	r1, #64	; 0x40
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f8b2 	bl	800235a <UART_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e006      	b.n	800220e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b08a      	sub	sp, #40	; 0x28
 800221a:	af02      	add	r7, sp, #8
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b20      	cmp	r3, #32
 8002234:	f040 808c 	bne.w	8002350 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_UART_Receive+0x2e>
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e084      	b.n	8002352 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224e:	2b01      	cmp	r3, #1
 8002250:	d101      	bne.n	8002256 <HAL_UART_Receive+0x40>
 8002252:	2302      	movs	r3, #2
 8002254:	e07d      	b.n	8002352 <HAL_UART_Receive+0x13c>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2222      	movs	r2, #34	; 0x22
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002272:	f7fe ffcd 	bl	8001210 <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228c:	d108      	bne.n	80022a0 <HAL_UART_Receive+0x8a>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d104      	bne.n	80022a0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	e003      	b.n	80022a8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80022b0:	e043      	b.n	800233a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2120      	movs	r1, #32
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f84c 	bl	800235a <UART_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e042      	b.n	8002352 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022de:	b29a      	uxth	r2, r3
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	3302      	adds	r3, #2
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	e01f      	b.n	800232c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022f4:	d007      	beq.n	8002306 <HAL_UART_Receive+0xf0>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <HAL_UART_Receive+0xfe>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	e008      	b.n	8002326 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002320:	b2da      	uxtb	r2, r3
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1b6      	bne.n	80022b2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b090      	sub	sp, #64	; 0x40
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236a:	e050      	b.n	800240e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002372:	d04c      	beq.n	800240e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002376:	2b00      	cmp	r3, #0
 8002378:	d007      	beq.n	800238a <UART_WaitOnFlagUntilTimeout+0x30>
 800237a:	f7fe ff49 	bl	8001210 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002386:	429a      	cmp	r2, r3
 8002388:	d241      	bcs.n	800240e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	e853 3f00 	ldrex	r3, [r3]
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	330c      	adds	r3, #12
 80023a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023aa:	637a      	str	r2, [r7, #52]	; 0x34
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023b2:	e841 2300 	strex	r3, r2, [r1]
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1e5      	bne.n	800238a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3314      	adds	r3, #20
 80023c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	e853 3f00 	ldrex	r3, [r3]
 80023cc:	613b      	str	r3, [r7, #16]
   return(result);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3314      	adds	r3, #20
 80023dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023de:	623a      	str	r2, [r7, #32]
 80023e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e2:	69f9      	ldr	r1, [r7, #28]
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	e841 2300 	strex	r3, r2, [r1]
 80023ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1e5      	bne.n	80023be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e00f      	b.n	800242e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4013      	ands	r3, r2
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	429a      	cmp	r2, r3
 800241c:	bf0c      	ite	eq
 800241e:	2301      	moveq	r3, #1
 8002420:	2300      	movne	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	429a      	cmp	r2, r3
 800242a:	d09f      	beq.n	800236c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3740      	adds	r7, #64	; 0x40
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800243c:	b0c0      	sub	sp, #256	; 0x100
 800243e:	af00      	add	r7, sp, #0
 8002440:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	68d9      	ldr	r1, [r3, #12]
 8002456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	ea40 0301 	orr.w	r3, r0, r1
 8002460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	431a      	orrs	r2, r3
 8002470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	431a      	orrs	r2, r3
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002490:	f021 010c 	bic.w	r1, r1, #12
 8002494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800249e:	430b      	orrs	r3, r1
 80024a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b2:	6999      	ldr	r1, [r3, #24]
 80024b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	ea40 0301 	orr.w	r3, r0, r1
 80024be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b8f      	ldr	r3, [pc, #572]	; (8002704 <UART_SetConfig+0x2cc>)
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d005      	beq.n	80024d8 <UART_SetConfig+0xa0>
 80024cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4b8d      	ldr	r3, [pc, #564]	; (8002708 <UART_SetConfig+0x2d0>)
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d104      	bne.n	80024e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024d8:	f7ff fb26 	bl	8001b28 <HAL_RCC_GetPCLK2Freq>
 80024dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80024e0:	e003      	b.n	80024ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024e2:	f7ff fb0d 	bl	8001b00 <HAL_RCC_GetPCLK1Freq>
 80024e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024f4:	f040 810c 	bne.w	8002710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024fc:	2200      	movs	r2, #0
 80024fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002502:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800250a:	4622      	mov	r2, r4
 800250c:	462b      	mov	r3, r5
 800250e:	1891      	adds	r1, r2, r2
 8002510:	65b9      	str	r1, [r7, #88]	; 0x58
 8002512:	415b      	adcs	r3, r3
 8002514:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800251a:	4621      	mov	r1, r4
 800251c:	eb12 0801 	adds.w	r8, r2, r1
 8002520:	4629      	mov	r1, r5
 8002522:	eb43 0901 	adc.w	r9, r3, r1
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800253a:	4690      	mov	r8, r2
 800253c:	4699      	mov	r9, r3
 800253e:	4623      	mov	r3, r4
 8002540:	eb18 0303 	adds.w	r3, r8, r3
 8002544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002548:	462b      	mov	r3, r5
 800254a:	eb49 0303 	adc.w	r3, r9, r3
 800254e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800255e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002566:	460b      	mov	r3, r1
 8002568:	18db      	adds	r3, r3, r3
 800256a:	653b      	str	r3, [r7, #80]	; 0x50
 800256c:	4613      	mov	r3, r2
 800256e:	eb42 0303 	adc.w	r3, r2, r3
 8002572:	657b      	str	r3, [r7, #84]	; 0x54
 8002574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800257c:	f7fd fea0 	bl	80002c0 <__aeabi_uldivmod>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <UART_SetConfig+0x2d4>)
 8002586:	fba3 2302 	umull	r2, r3, r3, r2
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	011c      	lsls	r4, r3, #4
 800258e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002592:	2200      	movs	r2, #0
 8002594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002598:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800259c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80025a0:	4642      	mov	r2, r8
 80025a2:	464b      	mov	r3, r9
 80025a4:	1891      	adds	r1, r2, r2
 80025a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80025a8:	415b      	adcs	r3, r3
 80025aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80025b0:	4641      	mov	r1, r8
 80025b2:	eb12 0a01 	adds.w	sl, r2, r1
 80025b6:	4649      	mov	r1, r9
 80025b8:	eb43 0b01 	adc.w	fp, r3, r1
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025d0:	4692      	mov	sl, r2
 80025d2:	469b      	mov	fp, r3
 80025d4:	4643      	mov	r3, r8
 80025d6:	eb1a 0303 	adds.w	r3, sl, r3
 80025da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025de:	464b      	mov	r3, r9
 80025e0:	eb4b 0303 	adc.w	r3, fp, r3
 80025e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025fc:	460b      	mov	r3, r1
 80025fe:	18db      	adds	r3, r3, r3
 8002600:	643b      	str	r3, [r7, #64]	; 0x40
 8002602:	4613      	mov	r3, r2
 8002604:	eb42 0303 	adc.w	r3, r2, r3
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
 800260a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800260e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002612:	f7fd fe55 	bl	80002c0 <__aeabi_uldivmod>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4611      	mov	r1, r2
 800261c:	4b3b      	ldr	r3, [pc, #236]	; (800270c <UART_SetConfig+0x2d4>)
 800261e:	fba3 2301 	umull	r2, r3, r3, r1
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2264      	movs	r2, #100	; 0x64
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	1acb      	subs	r3, r1, r3
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002632:	4b36      	ldr	r3, [pc, #216]	; (800270c <UART_SetConfig+0x2d4>)
 8002634:	fba3 2302 	umull	r2, r3, r3, r2
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002640:	441c      	add	r4, r3
 8002642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002646:	2200      	movs	r2, #0
 8002648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800264c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002654:	4642      	mov	r2, r8
 8002656:	464b      	mov	r3, r9
 8002658:	1891      	adds	r1, r2, r2
 800265a:	63b9      	str	r1, [r7, #56]	; 0x38
 800265c:	415b      	adcs	r3, r3
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002664:	4641      	mov	r1, r8
 8002666:	1851      	adds	r1, r2, r1
 8002668:	6339      	str	r1, [r7, #48]	; 0x30
 800266a:	4649      	mov	r1, r9
 800266c:	414b      	adcs	r3, r1
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800267c:	4659      	mov	r1, fp
 800267e:	00cb      	lsls	r3, r1, #3
 8002680:	4651      	mov	r1, sl
 8002682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002686:	4651      	mov	r1, sl
 8002688:	00ca      	lsls	r2, r1, #3
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	4603      	mov	r3, r0
 8002690:	4642      	mov	r2, r8
 8002692:	189b      	adds	r3, r3, r2
 8002694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002698:	464b      	mov	r3, r9
 800269a:	460a      	mov	r2, r1
 800269c:	eb42 0303 	adc.w	r3, r2, r3
 80026a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80026b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80026b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80026b8:	460b      	mov	r3, r1
 80026ba:	18db      	adds	r3, r3, r3
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026be:	4613      	mov	r3, r2
 80026c0:	eb42 0303 	adc.w	r3, r2, r3
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80026ce:	f7fd fdf7 	bl	80002c0 <__aeabi_uldivmod>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <UART_SetConfig+0x2d4>)
 80026d8:	fba3 1302 	umull	r1, r3, r3, r2
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	2164      	movs	r1, #100	; 0x64
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	3332      	adds	r3, #50	; 0x32
 80026ea:	4a08      	ldr	r2, [pc, #32]	; (800270c <UART_SetConfig+0x2d4>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	f003 0207 	and.w	r2, r3, #7
 80026f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4422      	add	r2, r4
 80026fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002700:	e105      	b.n	800290e <UART_SetConfig+0x4d6>
 8002702:	bf00      	nop
 8002704:	40011000 	.word	0x40011000
 8002708:	40011400 	.word	0x40011400
 800270c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002714:	2200      	movs	r2, #0
 8002716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800271a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800271e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002722:	4642      	mov	r2, r8
 8002724:	464b      	mov	r3, r9
 8002726:	1891      	adds	r1, r2, r2
 8002728:	6239      	str	r1, [r7, #32]
 800272a:	415b      	adcs	r3, r3
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002732:	4641      	mov	r1, r8
 8002734:	1854      	adds	r4, r2, r1
 8002736:	4649      	mov	r1, r9
 8002738:	eb43 0501 	adc.w	r5, r3, r1
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	00eb      	lsls	r3, r5, #3
 8002746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274a:	00e2      	lsls	r2, r4, #3
 800274c:	4614      	mov	r4, r2
 800274e:	461d      	mov	r5, r3
 8002750:	4643      	mov	r3, r8
 8002752:	18e3      	adds	r3, r4, r3
 8002754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002758:	464b      	mov	r3, r9
 800275a:	eb45 0303 	adc.w	r3, r5, r3
 800275e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800276e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800277e:	4629      	mov	r1, r5
 8002780:	008b      	lsls	r3, r1, #2
 8002782:	4621      	mov	r1, r4
 8002784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002788:	4621      	mov	r1, r4
 800278a:	008a      	lsls	r2, r1, #2
 800278c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002790:	f7fd fd96 	bl	80002c0 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4b60      	ldr	r3, [pc, #384]	; (800291c <UART_SetConfig+0x4e4>)
 800279a:	fba3 2302 	umull	r2, r3, r3, r2
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	011c      	lsls	r4, r3, #4
 80027a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80027ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80027b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80027b4:	4642      	mov	r2, r8
 80027b6:	464b      	mov	r3, r9
 80027b8:	1891      	adds	r1, r2, r2
 80027ba:	61b9      	str	r1, [r7, #24]
 80027bc:	415b      	adcs	r3, r3
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c4:	4641      	mov	r1, r8
 80027c6:	1851      	adds	r1, r2, r1
 80027c8:	6139      	str	r1, [r7, #16]
 80027ca:	4649      	mov	r1, r9
 80027cc:	414b      	adcs	r3, r1
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027dc:	4659      	mov	r1, fp
 80027de:	00cb      	lsls	r3, r1, #3
 80027e0:	4651      	mov	r1, sl
 80027e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027e6:	4651      	mov	r1, sl
 80027e8:	00ca      	lsls	r2, r1, #3
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	4642      	mov	r2, r8
 80027f2:	189b      	adds	r3, r3, r2
 80027f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027f8:	464b      	mov	r3, r9
 80027fa:	460a      	mov	r2, r1
 80027fc:	eb42 0303 	adc.w	r3, r2, r3
 8002800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	67bb      	str	r3, [r7, #120]	; 0x78
 800280e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800281c:	4649      	mov	r1, r9
 800281e:	008b      	lsls	r3, r1, #2
 8002820:	4641      	mov	r1, r8
 8002822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002826:	4641      	mov	r1, r8
 8002828:	008a      	lsls	r2, r1, #2
 800282a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800282e:	f7fd fd47 	bl	80002c0 <__aeabi_uldivmod>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <UART_SetConfig+0x4e4>)
 8002838:	fba3 1302 	umull	r1, r3, r3, r2
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	2164      	movs	r1, #100	; 0x64
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	3332      	adds	r3, #50	; 0x32
 800284a:	4a34      	ldr	r2, [pc, #208]	; (800291c <UART_SetConfig+0x4e4>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	095b      	lsrs	r3, r3, #5
 8002852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002856:	441c      	add	r4, r3
 8002858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800285c:	2200      	movs	r2, #0
 800285e:	673b      	str	r3, [r7, #112]	; 0x70
 8002860:	677a      	str	r2, [r7, #116]	; 0x74
 8002862:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002866:	4642      	mov	r2, r8
 8002868:	464b      	mov	r3, r9
 800286a:	1891      	adds	r1, r2, r2
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	415b      	adcs	r3, r3
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002876:	4641      	mov	r1, r8
 8002878:	1851      	adds	r1, r2, r1
 800287a:	6039      	str	r1, [r7, #0]
 800287c:	4649      	mov	r1, r9
 800287e:	414b      	adcs	r3, r1
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800288e:	4659      	mov	r1, fp
 8002890:	00cb      	lsls	r3, r1, #3
 8002892:	4651      	mov	r1, sl
 8002894:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002898:	4651      	mov	r1, sl
 800289a:	00ca      	lsls	r2, r1, #3
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	4603      	mov	r3, r0
 80028a2:	4642      	mov	r2, r8
 80028a4:	189b      	adds	r3, r3, r2
 80028a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80028a8:	464b      	mov	r3, r9
 80028aa:	460a      	mov	r2, r1
 80028ac:	eb42 0303 	adc.w	r3, r2, r3
 80028b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	663b      	str	r3, [r7, #96]	; 0x60
 80028bc:	667a      	str	r2, [r7, #100]	; 0x64
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80028ca:	4649      	mov	r1, r9
 80028cc:	008b      	lsls	r3, r1, #2
 80028ce:	4641      	mov	r1, r8
 80028d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028d4:	4641      	mov	r1, r8
 80028d6:	008a      	lsls	r2, r1, #2
 80028d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028dc:	f7fd fcf0 	bl	80002c0 <__aeabi_uldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <UART_SetConfig+0x4e4>)
 80028e6:	fba3 1302 	umull	r1, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	2164      	movs	r1, #100	; 0x64
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	3332      	adds	r3, #50	; 0x32
 80028f8:	4a08      	ldr	r2, [pc, #32]	; (800291c <UART_SetConfig+0x4e4>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	f003 020f 	and.w	r2, r3, #15
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4422      	add	r2, r4
 800290c:	609a      	str	r2, [r3, #8]
}
 800290e:	bf00      	nop
 8002910:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002914:	46bd      	mov	sp, r7
 8002916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800291a:	bf00      	nop
 800291c:	51eb851f 	.word	0x51eb851f

08002920 <__assert_func>:
 8002920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002922:	4614      	mov	r4, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <__assert_func+0x2c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4605      	mov	r5, r0
 800292c:	68d8      	ldr	r0, [r3, #12]
 800292e:	b14c      	cbz	r4, 8002944 <__assert_func+0x24>
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <__assert_func+0x30>)
 8002932:	9100      	str	r1, [sp, #0]
 8002934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002938:	4906      	ldr	r1, [pc, #24]	; (8002954 <__assert_func+0x34>)
 800293a:	462b      	mov	r3, r5
 800293c:	f000 f818 	bl	8002970 <fiprintf>
 8002940:	f000 ff2c 	bl	800379c <abort>
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <__assert_func+0x38>)
 8002946:	461c      	mov	r4, r3
 8002948:	e7f3      	b.n	8002932 <__assert_func+0x12>
 800294a:	bf00      	nop
 800294c:	2000002c 	.word	0x2000002c
 8002950:	08004318 	.word	0x08004318
 8002954:	08004325 	.word	0x08004325
 8002958:	08004353 	.word	0x08004353

0800295c <atoi>:
 800295c:	220a      	movs	r2, #10
 800295e:	2100      	movs	r1, #0
 8002960:	f000 be10 	b.w	8003584 <strtol>

08002964 <__errno>:
 8002964:	4b01      	ldr	r3, [pc, #4]	; (800296c <__errno+0x8>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	2000002c 	.word	0x2000002c

08002970 <fiprintf>:
 8002970:	b40e      	push	{r1, r2, r3}
 8002972:	b503      	push	{r0, r1, lr}
 8002974:	4601      	mov	r1, r0
 8002976:	ab03      	add	r3, sp, #12
 8002978:	4805      	ldr	r0, [pc, #20]	; (8002990 <fiprintf+0x20>)
 800297a:	f853 2b04 	ldr.w	r2, [r3], #4
 800297e:	6800      	ldr	r0, [r0, #0]
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	f000 f967 	bl	8002c54 <_vfiprintf_r>
 8002986:	b002      	add	sp, #8
 8002988:	f85d eb04 	ldr.w	lr, [sp], #4
 800298c:	b003      	add	sp, #12
 800298e:	4770      	bx	lr
 8002990:	2000002c 	.word	0x2000002c

08002994 <__libc_init_array>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	4d0d      	ldr	r5, [pc, #52]	; (80029cc <__libc_init_array+0x38>)
 8002998:	4c0d      	ldr	r4, [pc, #52]	; (80029d0 <__libc_init_array+0x3c>)
 800299a:	1b64      	subs	r4, r4, r5
 800299c:	10a4      	asrs	r4, r4, #2
 800299e:	2600      	movs	r6, #0
 80029a0:	42a6      	cmp	r6, r4
 80029a2:	d109      	bne.n	80029b8 <__libc_init_array+0x24>
 80029a4:	4d0b      	ldr	r5, [pc, #44]	; (80029d4 <__libc_init_array+0x40>)
 80029a6:	4c0c      	ldr	r4, [pc, #48]	; (80029d8 <__libc_init_array+0x44>)
 80029a8:	f001 fbd6 	bl	8004158 <_init>
 80029ac:	1b64      	subs	r4, r4, r5
 80029ae:	10a4      	asrs	r4, r4, #2
 80029b0:	2600      	movs	r6, #0
 80029b2:	42a6      	cmp	r6, r4
 80029b4:	d105      	bne.n	80029c2 <__libc_init_array+0x2e>
 80029b6:	bd70      	pop	{r4, r5, r6, pc}
 80029b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029bc:	4798      	blx	r3
 80029be:	3601      	adds	r6, #1
 80029c0:	e7ee      	b.n	80029a0 <__libc_init_array+0xc>
 80029c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029c6:	4798      	blx	r3
 80029c8:	3601      	adds	r6, #1
 80029ca:	e7f2      	b.n	80029b2 <__libc_init_array+0x1e>
 80029cc:	08004590 	.word	0x08004590
 80029d0:	08004590 	.word	0x08004590
 80029d4:	08004590 	.word	0x08004590
 80029d8:	08004594 	.word	0x08004594

080029dc <__itoa>:
 80029dc:	1e93      	subs	r3, r2, #2
 80029de:	2b22      	cmp	r3, #34	; 0x22
 80029e0:	b510      	push	{r4, lr}
 80029e2:	460c      	mov	r4, r1
 80029e4:	d904      	bls.n	80029f0 <__itoa+0x14>
 80029e6:	2300      	movs	r3, #0
 80029e8:	700b      	strb	r3, [r1, #0]
 80029ea:	461c      	mov	r4, r3
 80029ec:	4620      	mov	r0, r4
 80029ee:	bd10      	pop	{r4, pc}
 80029f0:	2a0a      	cmp	r2, #10
 80029f2:	d109      	bne.n	8002a08 <__itoa+0x2c>
 80029f4:	2800      	cmp	r0, #0
 80029f6:	da07      	bge.n	8002a08 <__itoa+0x2c>
 80029f8:	232d      	movs	r3, #45	; 0x2d
 80029fa:	700b      	strb	r3, [r1, #0]
 80029fc:	4240      	negs	r0, r0
 80029fe:	2101      	movs	r1, #1
 8002a00:	4421      	add	r1, r4
 8002a02:	f000 fdc9 	bl	8003598 <__utoa>
 8002a06:	e7f1      	b.n	80029ec <__itoa+0x10>
 8002a08:	2100      	movs	r1, #0
 8002a0a:	e7f9      	b.n	8002a00 <__itoa+0x24>

08002a0c <itoa>:
 8002a0c:	f7ff bfe6 	b.w	80029dc <__itoa>

08002a10 <malloc>:
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <malloc+0xc>)
 8002a12:	4601      	mov	r1, r0
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	f000 b87f 	b.w	8002b18 <_malloc_r>
 8002a1a:	bf00      	nop
 8002a1c:	2000002c 	.word	0x2000002c

08002a20 <free>:
 8002a20:	4b02      	ldr	r3, [pc, #8]	; (8002a2c <free+0xc>)
 8002a22:	4601      	mov	r1, r0
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	f000 b80b 	b.w	8002a40 <_free_r>
 8002a2a:	bf00      	nop
 8002a2c:	2000002c 	.word	0x2000002c

08002a30 <memset>:
 8002a30:	4402      	add	r2, r0
 8002a32:	4603      	mov	r3, r0
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d100      	bne.n	8002a3a <memset+0xa>
 8002a38:	4770      	bx	lr
 8002a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3e:	e7f9      	b.n	8002a34 <memset+0x4>

08002a40 <_free_r>:
 8002a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a42:	2900      	cmp	r1, #0
 8002a44:	d044      	beq.n	8002ad0 <_free_r+0x90>
 8002a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a4a:	9001      	str	r0, [sp, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8002a52:	bfb8      	it	lt
 8002a54:	18e4      	addlt	r4, r4, r3
 8002a56:	f001 f8f1 	bl	8003c3c <__malloc_lock>
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <_free_r+0x94>)
 8002a5c:	9801      	ldr	r0, [sp, #4]
 8002a5e:	6813      	ldr	r3, [r2, #0]
 8002a60:	b933      	cbnz	r3, 8002a70 <_free_r+0x30>
 8002a62:	6063      	str	r3, [r4, #4]
 8002a64:	6014      	str	r4, [r2, #0]
 8002a66:	b003      	add	sp, #12
 8002a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a6c:	f001 b8ec 	b.w	8003c48 <__malloc_unlock>
 8002a70:	42a3      	cmp	r3, r4
 8002a72:	d908      	bls.n	8002a86 <_free_r+0x46>
 8002a74:	6825      	ldr	r5, [r4, #0]
 8002a76:	1961      	adds	r1, r4, r5
 8002a78:	428b      	cmp	r3, r1
 8002a7a:	bf01      	itttt	eq
 8002a7c:	6819      	ldreq	r1, [r3, #0]
 8002a7e:	685b      	ldreq	r3, [r3, #4]
 8002a80:	1949      	addeq	r1, r1, r5
 8002a82:	6021      	streq	r1, [r4, #0]
 8002a84:	e7ed      	b.n	8002a62 <_free_r+0x22>
 8002a86:	461a      	mov	r2, r3
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	b10b      	cbz	r3, 8002a90 <_free_r+0x50>
 8002a8c:	42a3      	cmp	r3, r4
 8002a8e:	d9fa      	bls.n	8002a86 <_free_r+0x46>
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	1855      	adds	r5, r2, r1
 8002a94:	42a5      	cmp	r5, r4
 8002a96:	d10b      	bne.n	8002ab0 <_free_r+0x70>
 8002a98:	6824      	ldr	r4, [r4, #0]
 8002a9a:	4421      	add	r1, r4
 8002a9c:	1854      	adds	r4, r2, r1
 8002a9e:	42a3      	cmp	r3, r4
 8002aa0:	6011      	str	r1, [r2, #0]
 8002aa2:	d1e0      	bne.n	8002a66 <_free_r+0x26>
 8002aa4:	681c      	ldr	r4, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	6053      	str	r3, [r2, #4]
 8002aaa:	4421      	add	r1, r4
 8002aac:	6011      	str	r1, [r2, #0]
 8002aae:	e7da      	b.n	8002a66 <_free_r+0x26>
 8002ab0:	d902      	bls.n	8002ab8 <_free_r+0x78>
 8002ab2:	230c      	movs	r3, #12
 8002ab4:	6003      	str	r3, [r0, #0]
 8002ab6:	e7d6      	b.n	8002a66 <_free_r+0x26>
 8002ab8:	6825      	ldr	r5, [r4, #0]
 8002aba:	1961      	adds	r1, r4, r5
 8002abc:	428b      	cmp	r3, r1
 8002abe:	bf04      	itt	eq
 8002ac0:	6819      	ldreq	r1, [r3, #0]
 8002ac2:	685b      	ldreq	r3, [r3, #4]
 8002ac4:	6063      	str	r3, [r4, #4]
 8002ac6:	bf04      	itt	eq
 8002ac8:	1949      	addeq	r1, r1, r5
 8002aca:	6021      	streq	r1, [r4, #0]
 8002acc:	6054      	str	r4, [r2, #4]
 8002ace:	e7ca      	b.n	8002a66 <_free_r+0x26>
 8002ad0:	b003      	add	sp, #12
 8002ad2:	bd30      	pop	{r4, r5, pc}
 8002ad4:	20000144 	.word	0x20000144

08002ad8 <sbrk_aligned>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	4e0e      	ldr	r6, [pc, #56]	; (8002b14 <sbrk_aligned+0x3c>)
 8002adc:	460c      	mov	r4, r1
 8002ade:	6831      	ldr	r1, [r6, #0]
 8002ae0:	4605      	mov	r5, r0
 8002ae2:	b911      	cbnz	r1, 8002aea <sbrk_aligned+0x12>
 8002ae4:	f000 fbf0 	bl	80032c8 <_sbrk_r>
 8002ae8:	6030      	str	r0, [r6, #0]
 8002aea:	4621      	mov	r1, r4
 8002aec:	4628      	mov	r0, r5
 8002aee:	f000 fbeb 	bl	80032c8 <_sbrk_r>
 8002af2:	1c43      	adds	r3, r0, #1
 8002af4:	d00a      	beq.n	8002b0c <sbrk_aligned+0x34>
 8002af6:	1cc4      	adds	r4, r0, #3
 8002af8:	f024 0403 	bic.w	r4, r4, #3
 8002afc:	42a0      	cmp	r0, r4
 8002afe:	d007      	beq.n	8002b10 <sbrk_aligned+0x38>
 8002b00:	1a21      	subs	r1, r4, r0
 8002b02:	4628      	mov	r0, r5
 8002b04:	f000 fbe0 	bl	80032c8 <_sbrk_r>
 8002b08:	3001      	adds	r0, #1
 8002b0a:	d101      	bne.n	8002b10 <sbrk_aligned+0x38>
 8002b0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002b10:	4620      	mov	r0, r4
 8002b12:	bd70      	pop	{r4, r5, r6, pc}
 8002b14:	20000148 	.word	0x20000148

08002b18 <_malloc_r>:
 8002b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b1c:	1ccd      	adds	r5, r1, #3
 8002b1e:	f025 0503 	bic.w	r5, r5, #3
 8002b22:	3508      	adds	r5, #8
 8002b24:	2d0c      	cmp	r5, #12
 8002b26:	bf38      	it	cc
 8002b28:	250c      	movcc	r5, #12
 8002b2a:	2d00      	cmp	r5, #0
 8002b2c:	4607      	mov	r7, r0
 8002b2e:	db01      	blt.n	8002b34 <_malloc_r+0x1c>
 8002b30:	42a9      	cmp	r1, r5
 8002b32:	d905      	bls.n	8002b40 <_malloc_r+0x28>
 8002b34:	230c      	movs	r3, #12
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	2600      	movs	r6, #0
 8002b3a:	4630      	mov	r0, r6
 8002b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b40:	4e2e      	ldr	r6, [pc, #184]	; (8002bfc <_malloc_r+0xe4>)
 8002b42:	f001 f87b 	bl	8003c3c <__malloc_lock>
 8002b46:	6833      	ldr	r3, [r6, #0]
 8002b48:	461c      	mov	r4, r3
 8002b4a:	bb34      	cbnz	r4, 8002b9a <_malloc_r+0x82>
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	4638      	mov	r0, r7
 8002b50:	f7ff ffc2 	bl	8002ad8 <sbrk_aligned>
 8002b54:	1c43      	adds	r3, r0, #1
 8002b56:	4604      	mov	r4, r0
 8002b58:	d14d      	bne.n	8002bf6 <_malloc_r+0xde>
 8002b5a:	6834      	ldr	r4, [r6, #0]
 8002b5c:	4626      	mov	r6, r4
 8002b5e:	2e00      	cmp	r6, #0
 8002b60:	d140      	bne.n	8002be4 <_malloc_r+0xcc>
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	4631      	mov	r1, r6
 8002b66:	4638      	mov	r0, r7
 8002b68:	eb04 0803 	add.w	r8, r4, r3
 8002b6c:	f000 fbac 	bl	80032c8 <_sbrk_r>
 8002b70:	4580      	cmp	r8, r0
 8002b72:	d13a      	bne.n	8002bea <_malloc_r+0xd2>
 8002b74:	6821      	ldr	r1, [r4, #0]
 8002b76:	3503      	adds	r5, #3
 8002b78:	1a6d      	subs	r5, r5, r1
 8002b7a:	f025 0503 	bic.w	r5, r5, #3
 8002b7e:	3508      	adds	r5, #8
 8002b80:	2d0c      	cmp	r5, #12
 8002b82:	bf38      	it	cc
 8002b84:	250c      	movcc	r5, #12
 8002b86:	4629      	mov	r1, r5
 8002b88:	4638      	mov	r0, r7
 8002b8a:	f7ff ffa5 	bl	8002ad8 <sbrk_aligned>
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d02b      	beq.n	8002bea <_malloc_r+0xd2>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	442b      	add	r3, r5
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	e00e      	b.n	8002bb8 <_malloc_r+0xa0>
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	1b52      	subs	r2, r2, r5
 8002b9e:	d41e      	bmi.n	8002bde <_malloc_r+0xc6>
 8002ba0:	2a0b      	cmp	r2, #11
 8002ba2:	d916      	bls.n	8002bd2 <_malloc_r+0xba>
 8002ba4:	1961      	adds	r1, r4, r5
 8002ba6:	42a3      	cmp	r3, r4
 8002ba8:	6025      	str	r5, [r4, #0]
 8002baa:	bf18      	it	ne
 8002bac:	6059      	strne	r1, [r3, #4]
 8002bae:	6863      	ldr	r3, [r4, #4]
 8002bb0:	bf08      	it	eq
 8002bb2:	6031      	streq	r1, [r6, #0]
 8002bb4:	5162      	str	r2, [r4, r5]
 8002bb6:	604b      	str	r3, [r1, #4]
 8002bb8:	4638      	mov	r0, r7
 8002bba:	f104 060b 	add.w	r6, r4, #11
 8002bbe:	f001 f843 	bl	8003c48 <__malloc_unlock>
 8002bc2:	f026 0607 	bic.w	r6, r6, #7
 8002bc6:	1d23      	adds	r3, r4, #4
 8002bc8:	1af2      	subs	r2, r6, r3
 8002bca:	d0b6      	beq.n	8002b3a <_malloc_r+0x22>
 8002bcc:	1b9b      	subs	r3, r3, r6
 8002bce:	50a3      	str	r3, [r4, r2]
 8002bd0:	e7b3      	b.n	8002b3a <_malloc_r+0x22>
 8002bd2:	6862      	ldr	r2, [r4, #4]
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	bf0c      	ite	eq
 8002bd8:	6032      	streq	r2, [r6, #0]
 8002bda:	605a      	strne	r2, [r3, #4]
 8002bdc:	e7ec      	b.n	8002bb8 <_malloc_r+0xa0>
 8002bde:	4623      	mov	r3, r4
 8002be0:	6864      	ldr	r4, [r4, #4]
 8002be2:	e7b2      	b.n	8002b4a <_malloc_r+0x32>
 8002be4:	4634      	mov	r4, r6
 8002be6:	6876      	ldr	r6, [r6, #4]
 8002be8:	e7b9      	b.n	8002b5e <_malloc_r+0x46>
 8002bea:	230c      	movs	r3, #12
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	4638      	mov	r0, r7
 8002bf0:	f001 f82a 	bl	8003c48 <__malloc_unlock>
 8002bf4:	e7a1      	b.n	8002b3a <_malloc_r+0x22>
 8002bf6:	6025      	str	r5, [r4, #0]
 8002bf8:	e7de      	b.n	8002bb8 <_malloc_r+0xa0>
 8002bfa:	bf00      	nop
 8002bfc:	20000144 	.word	0x20000144

08002c00 <__sfputc_r>:
 8002c00:	6893      	ldr	r3, [r2, #8]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	b410      	push	{r4}
 8002c08:	6093      	str	r3, [r2, #8]
 8002c0a:	da08      	bge.n	8002c1e <__sfputc_r+0x1e>
 8002c0c:	6994      	ldr	r4, [r2, #24]
 8002c0e:	42a3      	cmp	r3, r4
 8002c10:	db01      	blt.n	8002c16 <__sfputc_r+0x16>
 8002c12:	290a      	cmp	r1, #10
 8002c14:	d103      	bne.n	8002c1e <__sfputc_r+0x1e>
 8002c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c1a:	f000 bcff 	b.w	800361c <__swbuf_r>
 8002c1e:	6813      	ldr	r3, [r2, #0]
 8002c20:	1c58      	adds	r0, r3, #1
 8002c22:	6010      	str	r0, [r2, #0]
 8002c24:	7019      	strb	r1, [r3, #0]
 8002c26:	4608      	mov	r0, r1
 8002c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <__sfputs_r>:
 8002c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c30:	4606      	mov	r6, r0
 8002c32:	460f      	mov	r7, r1
 8002c34:	4614      	mov	r4, r2
 8002c36:	18d5      	adds	r5, r2, r3
 8002c38:	42ac      	cmp	r4, r5
 8002c3a:	d101      	bne.n	8002c40 <__sfputs_r+0x12>
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	e007      	b.n	8002c50 <__sfputs_r+0x22>
 8002c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c44:	463a      	mov	r2, r7
 8002c46:	4630      	mov	r0, r6
 8002c48:	f7ff ffda 	bl	8002c00 <__sfputc_r>
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	d1f3      	bne.n	8002c38 <__sfputs_r+0xa>
 8002c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c54 <_vfiprintf_r>:
 8002c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c58:	460d      	mov	r5, r1
 8002c5a:	b09d      	sub	sp, #116	; 0x74
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	4698      	mov	r8, r3
 8002c60:	4606      	mov	r6, r0
 8002c62:	b118      	cbz	r0, 8002c6c <_vfiprintf_r+0x18>
 8002c64:	6983      	ldr	r3, [r0, #24]
 8002c66:	b90b      	cbnz	r3, 8002c6c <_vfiprintf_r+0x18>
 8002c68:	f000 feba 	bl	80039e0 <__sinit>
 8002c6c:	4b89      	ldr	r3, [pc, #548]	; (8002e94 <_vfiprintf_r+0x240>)
 8002c6e:	429d      	cmp	r5, r3
 8002c70:	d11b      	bne.n	8002caa <_vfiprintf_r+0x56>
 8002c72:	6875      	ldr	r5, [r6, #4]
 8002c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c76:	07d9      	lsls	r1, r3, #31
 8002c78:	d405      	bmi.n	8002c86 <_vfiprintf_r+0x32>
 8002c7a:	89ab      	ldrh	r3, [r5, #12]
 8002c7c:	059a      	lsls	r2, r3, #22
 8002c7e:	d402      	bmi.n	8002c86 <_vfiprintf_r+0x32>
 8002c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c82:	f000 ff4b 	bl	8003b1c <__retarget_lock_acquire_recursive>
 8002c86:	89ab      	ldrh	r3, [r5, #12]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	d501      	bpl.n	8002c90 <_vfiprintf_r+0x3c>
 8002c8c:	692b      	ldr	r3, [r5, #16]
 8002c8e:	b9eb      	cbnz	r3, 8002ccc <_vfiprintf_r+0x78>
 8002c90:	4629      	mov	r1, r5
 8002c92:	4630      	mov	r0, r6
 8002c94:	f000 fd14 	bl	80036c0 <__swsetup_r>
 8002c98:	b1c0      	cbz	r0, 8002ccc <_vfiprintf_r+0x78>
 8002c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c9c:	07dc      	lsls	r4, r3, #31
 8002c9e:	d50e      	bpl.n	8002cbe <_vfiprintf_r+0x6a>
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca4:	b01d      	add	sp, #116	; 0x74
 8002ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002caa:	4b7b      	ldr	r3, [pc, #492]	; (8002e98 <_vfiprintf_r+0x244>)
 8002cac:	429d      	cmp	r5, r3
 8002cae:	d101      	bne.n	8002cb4 <_vfiprintf_r+0x60>
 8002cb0:	68b5      	ldr	r5, [r6, #8]
 8002cb2:	e7df      	b.n	8002c74 <_vfiprintf_r+0x20>
 8002cb4:	4b79      	ldr	r3, [pc, #484]	; (8002e9c <_vfiprintf_r+0x248>)
 8002cb6:	429d      	cmp	r5, r3
 8002cb8:	bf08      	it	eq
 8002cba:	68f5      	ldreq	r5, [r6, #12]
 8002cbc:	e7da      	b.n	8002c74 <_vfiprintf_r+0x20>
 8002cbe:	89ab      	ldrh	r3, [r5, #12]
 8002cc0:	0598      	lsls	r0, r3, #22
 8002cc2:	d4ed      	bmi.n	8002ca0 <_vfiprintf_r+0x4c>
 8002cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cc6:	f000 ff2a 	bl	8003b1e <__retarget_lock_release_recursive>
 8002cca:	e7e9      	b.n	8002ca0 <_vfiprintf_r+0x4c>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9309      	str	r3, [sp, #36]	; 0x24
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cda:	2330      	movs	r3, #48	; 0x30
 8002cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002ea0 <_vfiprintf_r+0x24c>
 8002ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ce4:	f04f 0901 	mov.w	r9, #1
 8002ce8:	4623      	mov	r3, r4
 8002cea:	469a      	mov	sl, r3
 8002cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cf0:	b10a      	cbz	r2, 8002cf6 <_vfiprintf_r+0xa2>
 8002cf2:	2a25      	cmp	r2, #37	; 0x25
 8002cf4:	d1f9      	bne.n	8002cea <_vfiprintf_r+0x96>
 8002cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8002cfa:	d00b      	beq.n	8002d14 <_vfiprintf_r+0xc0>
 8002cfc:	465b      	mov	r3, fp
 8002cfe:	4622      	mov	r2, r4
 8002d00:	4629      	mov	r1, r5
 8002d02:	4630      	mov	r0, r6
 8002d04:	f7ff ff93 	bl	8002c2e <__sfputs_r>
 8002d08:	3001      	adds	r0, #1
 8002d0a:	f000 80aa 	beq.w	8002e62 <_vfiprintf_r+0x20e>
 8002d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d10:	445a      	add	r2, fp
 8002d12:	9209      	str	r2, [sp, #36]	; 0x24
 8002d14:	f89a 3000 	ldrb.w	r3, [sl]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80a2 	beq.w	8002e62 <_vfiprintf_r+0x20e>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d28:	f10a 0a01 	add.w	sl, sl, #1
 8002d2c:	9304      	str	r3, [sp, #16]
 8002d2e:	9307      	str	r3, [sp, #28]
 8002d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d34:	931a      	str	r3, [sp, #104]	; 0x68
 8002d36:	4654      	mov	r4, sl
 8002d38:	2205      	movs	r2, #5
 8002d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d3e:	4858      	ldr	r0, [pc, #352]	; (8002ea0 <_vfiprintf_r+0x24c>)
 8002d40:	f7fd fa6e 	bl	8000220 <memchr>
 8002d44:	9a04      	ldr	r2, [sp, #16]
 8002d46:	b9d8      	cbnz	r0, 8002d80 <_vfiprintf_r+0x12c>
 8002d48:	06d1      	lsls	r1, r2, #27
 8002d4a:	bf44      	itt	mi
 8002d4c:	2320      	movmi	r3, #32
 8002d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d52:	0713      	lsls	r3, r2, #28
 8002d54:	bf44      	itt	mi
 8002d56:	232b      	movmi	r3, #43	; 0x2b
 8002d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d60:	2b2a      	cmp	r3, #42	; 0x2a
 8002d62:	d015      	beq.n	8002d90 <_vfiprintf_r+0x13c>
 8002d64:	9a07      	ldr	r2, [sp, #28]
 8002d66:	4654      	mov	r4, sl
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f04f 0c0a 	mov.w	ip, #10
 8002d6e:	4621      	mov	r1, r4
 8002d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d74:	3b30      	subs	r3, #48	; 0x30
 8002d76:	2b09      	cmp	r3, #9
 8002d78:	d94e      	bls.n	8002e18 <_vfiprintf_r+0x1c4>
 8002d7a:	b1b0      	cbz	r0, 8002daa <_vfiprintf_r+0x156>
 8002d7c:	9207      	str	r2, [sp, #28]
 8002d7e:	e014      	b.n	8002daa <_vfiprintf_r+0x156>
 8002d80:	eba0 0308 	sub.w	r3, r0, r8
 8002d84:	fa09 f303 	lsl.w	r3, r9, r3
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	9304      	str	r3, [sp, #16]
 8002d8c:	46a2      	mov	sl, r4
 8002d8e:	e7d2      	b.n	8002d36 <_vfiprintf_r+0xe2>
 8002d90:	9b03      	ldr	r3, [sp, #12]
 8002d92:	1d19      	adds	r1, r3, #4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	9103      	str	r1, [sp, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bfbb      	ittet	lt
 8002d9c:	425b      	neglt	r3, r3
 8002d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8002da2:	9307      	strge	r3, [sp, #28]
 8002da4:	9307      	strlt	r3, [sp, #28]
 8002da6:	bfb8      	it	lt
 8002da8:	9204      	strlt	r2, [sp, #16]
 8002daa:	7823      	ldrb	r3, [r4, #0]
 8002dac:	2b2e      	cmp	r3, #46	; 0x2e
 8002dae:	d10c      	bne.n	8002dca <_vfiprintf_r+0x176>
 8002db0:	7863      	ldrb	r3, [r4, #1]
 8002db2:	2b2a      	cmp	r3, #42	; 0x2a
 8002db4:	d135      	bne.n	8002e22 <_vfiprintf_r+0x1ce>
 8002db6:	9b03      	ldr	r3, [sp, #12]
 8002db8:	1d1a      	adds	r2, r3, #4
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	9203      	str	r2, [sp, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bfb8      	it	lt
 8002dc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002dc6:	3402      	adds	r4, #2
 8002dc8:	9305      	str	r3, [sp, #20]
 8002dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002eb0 <_vfiprintf_r+0x25c>
 8002dce:	7821      	ldrb	r1, [r4, #0]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	4650      	mov	r0, sl
 8002dd4:	f7fd fa24 	bl	8000220 <memchr>
 8002dd8:	b140      	cbz	r0, 8002dec <_vfiprintf_r+0x198>
 8002dda:	2340      	movs	r3, #64	; 0x40
 8002ddc:	eba0 000a 	sub.w	r0, r0, sl
 8002de0:	fa03 f000 	lsl.w	r0, r3, r0
 8002de4:	9b04      	ldr	r3, [sp, #16]
 8002de6:	4303      	orrs	r3, r0
 8002de8:	3401      	adds	r4, #1
 8002dea:	9304      	str	r3, [sp, #16]
 8002dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002df0:	482c      	ldr	r0, [pc, #176]	; (8002ea4 <_vfiprintf_r+0x250>)
 8002df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002df6:	2206      	movs	r2, #6
 8002df8:	f7fd fa12 	bl	8000220 <memchr>
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d03f      	beq.n	8002e80 <_vfiprintf_r+0x22c>
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <_vfiprintf_r+0x254>)
 8002e02:	bb1b      	cbnz	r3, 8002e4c <_vfiprintf_r+0x1f8>
 8002e04:	9b03      	ldr	r3, [sp, #12]
 8002e06:	3307      	adds	r3, #7
 8002e08:	f023 0307 	bic.w	r3, r3, #7
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	9303      	str	r3, [sp, #12]
 8002e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e12:	443b      	add	r3, r7
 8002e14:	9309      	str	r3, [sp, #36]	; 0x24
 8002e16:	e767      	b.n	8002ce8 <_vfiprintf_r+0x94>
 8002e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	2001      	movs	r0, #1
 8002e20:	e7a5      	b.n	8002d6e <_vfiprintf_r+0x11a>
 8002e22:	2300      	movs	r3, #0
 8002e24:	3401      	adds	r4, #1
 8002e26:	9305      	str	r3, [sp, #20]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f04f 0c0a 	mov.w	ip, #10
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e34:	3a30      	subs	r2, #48	; 0x30
 8002e36:	2a09      	cmp	r2, #9
 8002e38:	d903      	bls.n	8002e42 <_vfiprintf_r+0x1ee>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0c5      	beq.n	8002dca <_vfiprintf_r+0x176>
 8002e3e:	9105      	str	r1, [sp, #20]
 8002e40:	e7c3      	b.n	8002dca <_vfiprintf_r+0x176>
 8002e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e46:	4604      	mov	r4, r0
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e7f0      	b.n	8002e2e <_vfiprintf_r+0x1da>
 8002e4c:	ab03      	add	r3, sp, #12
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	462a      	mov	r2, r5
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <_vfiprintf_r+0x258>)
 8002e54:	a904      	add	r1, sp, #16
 8002e56:	4630      	mov	r0, r6
 8002e58:	f3af 8000 	nop.w
 8002e5c:	4607      	mov	r7, r0
 8002e5e:	1c78      	adds	r0, r7, #1
 8002e60:	d1d6      	bne.n	8002e10 <_vfiprintf_r+0x1bc>
 8002e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e64:	07d9      	lsls	r1, r3, #31
 8002e66:	d405      	bmi.n	8002e74 <_vfiprintf_r+0x220>
 8002e68:	89ab      	ldrh	r3, [r5, #12]
 8002e6a:	059a      	lsls	r2, r3, #22
 8002e6c:	d402      	bmi.n	8002e74 <_vfiprintf_r+0x220>
 8002e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e70:	f000 fe55 	bl	8003b1e <__retarget_lock_release_recursive>
 8002e74:	89ab      	ldrh	r3, [r5, #12]
 8002e76:	065b      	lsls	r3, r3, #25
 8002e78:	f53f af12 	bmi.w	8002ca0 <_vfiprintf_r+0x4c>
 8002e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e7e:	e711      	b.n	8002ca4 <_vfiprintf_r+0x50>
 8002e80:	ab03      	add	r3, sp, #12
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	462a      	mov	r2, r5
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <_vfiprintf_r+0x258>)
 8002e88:	a904      	add	r1, sp, #16
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f000 f880 	bl	8002f90 <_printf_i>
 8002e90:	e7e4      	b.n	8002e5c <_vfiprintf_r+0x208>
 8002e92:	bf00      	nop
 8002e94:	08004548 	.word	0x08004548
 8002e98:	08004568 	.word	0x08004568
 8002e9c:	08004528 	.word	0x08004528
 8002ea0:	08004358 	.word	0x08004358
 8002ea4:	08004362 	.word	0x08004362
 8002ea8:	00000000 	.word	0x00000000
 8002eac:	08002c2f 	.word	0x08002c2f
 8002eb0:	0800435e 	.word	0x0800435e

08002eb4 <_printf_common>:
 8002eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eb8:	4616      	mov	r6, r2
 8002eba:	4699      	mov	r9, r3
 8002ebc:	688a      	ldr	r2, [r1, #8]
 8002ebe:	690b      	ldr	r3, [r1, #16]
 8002ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	bfb8      	it	lt
 8002ec8:	4613      	movlt	r3, r2
 8002eca:	6033      	str	r3, [r6, #0]
 8002ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ed0:	4607      	mov	r7, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	b10a      	cbz	r2, 8002eda <_printf_common+0x26>
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	6033      	str	r3, [r6, #0]
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	0699      	lsls	r1, r3, #26
 8002ede:	bf42      	ittt	mi
 8002ee0:	6833      	ldrmi	r3, [r6, #0]
 8002ee2:	3302      	addmi	r3, #2
 8002ee4:	6033      	strmi	r3, [r6, #0]
 8002ee6:	6825      	ldr	r5, [r4, #0]
 8002ee8:	f015 0506 	ands.w	r5, r5, #6
 8002eec:	d106      	bne.n	8002efc <_printf_common+0x48>
 8002eee:	f104 0a19 	add.w	sl, r4, #25
 8002ef2:	68e3      	ldr	r3, [r4, #12]
 8002ef4:	6832      	ldr	r2, [r6, #0]
 8002ef6:	1a9b      	subs	r3, r3, r2
 8002ef8:	42ab      	cmp	r3, r5
 8002efa:	dc26      	bgt.n	8002f4a <_printf_common+0x96>
 8002efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f00:	1e13      	subs	r3, r2, #0
 8002f02:	6822      	ldr	r2, [r4, #0]
 8002f04:	bf18      	it	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	0692      	lsls	r2, r2, #26
 8002f0a:	d42b      	bmi.n	8002f64 <_printf_common+0xb0>
 8002f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f10:	4649      	mov	r1, r9
 8002f12:	4638      	mov	r0, r7
 8002f14:	47c0      	blx	r8
 8002f16:	3001      	adds	r0, #1
 8002f18:	d01e      	beq.n	8002f58 <_printf_common+0xa4>
 8002f1a:	6823      	ldr	r3, [r4, #0]
 8002f1c:	68e5      	ldr	r5, [r4, #12]
 8002f1e:	6832      	ldr	r2, [r6, #0]
 8002f20:	f003 0306 	and.w	r3, r3, #6
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	bf08      	it	eq
 8002f28:	1aad      	subeq	r5, r5, r2
 8002f2a:	68a3      	ldr	r3, [r4, #8]
 8002f2c:	6922      	ldr	r2, [r4, #16]
 8002f2e:	bf0c      	ite	eq
 8002f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f34:	2500      	movne	r5, #0
 8002f36:	4293      	cmp	r3, r2
 8002f38:	bfc4      	itt	gt
 8002f3a:	1a9b      	subgt	r3, r3, r2
 8002f3c:	18ed      	addgt	r5, r5, r3
 8002f3e:	2600      	movs	r6, #0
 8002f40:	341a      	adds	r4, #26
 8002f42:	42b5      	cmp	r5, r6
 8002f44:	d11a      	bne.n	8002f7c <_printf_common+0xc8>
 8002f46:	2000      	movs	r0, #0
 8002f48:	e008      	b.n	8002f5c <_printf_common+0xa8>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	4652      	mov	r2, sl
 8002f4e:	4649      	mov	r1, r9
 8002f50:	4638      	mov	r0, r7
 8002f52:	47c0      	blx	r8
 8002f54:	3001      	adds	r0, #1
 8002f56:	d103      	bne.n	8002f60 <_printf_common+0xac>
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f60:	3501      	adds	r5, #1
 8002f62:	e7c6      	b.n	8002ef2 <_printf_common+0x3e>
 8002f64:	18e1      	adds	r1, r4, r3
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	2030      	movs	r0, #48	; 0x30
 8002f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f6e:	4422      	add	r2, r4
 8002f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f78:	3302      	adds	r3, #2
 8002f7a:	e7c7      	b.n	8002f0c <_printf_common+0x58>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	4622      	mov	r2, r4
 8002f80:	4649      	mov	r1, r9
 8002f82:	4638      	mov	r0, r7
 8002f84:	47c0      	blx	r8
 8002f86:	3001      	adds	r0, #1
 8002f88:	d0e6      	beq.n	8002f58 <_printf_common+0xa4>
 8002f8a:	3601      	adds	r6, #1
 8002f8c:	e7d9      	b.n	8002f42 <_printf_common+0x8e>
	...

08002f90 <_printf_i>:
 8002f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f94:	7e0f      	ldrb	r7, [r1, #24]
 8002f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f98:	2f78      	cmp	r7, #120	; 0x78
 8002f9a:	4691      	mov	r9, r2
 8002f9c:	4680      	mov	r8, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	469a      	mov	sl, r3
 8002fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fa6:	d807      	bhi.n	8002fb8 <_printf_i+0x28>
 8002fa8:	2f62      	cmp	r7, #98	; 0x62
 8002faa:	d80a      	bhi.n	8002fc2 <_printf_i+0x32>
 8002fac:	2f00      	cmp	r7, #0
 8002fae:	f000 80d8 	beq.w	8003162 <_printf_i+0x1d2>
 8002fb2:	2f58      	cmp	r7, #88	; 0x58
 8002fb4:	f000 80a3 	beq.w	80030fe <_printf_i+0x16e>
 8002fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fc0:	e03a      	b.n	8003038 <_printf_i+0xa8>
 8002fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fc6:	2b15      	cmp	r3, #21
 8002fc8:	d8f6      	bhi.n	8002fb8 <_printf_i+0x28>
 8002fca:	a101      	add	r1, pc, #4	; (adr r1, 8002fd0 <_printf_i+0x40>)
 8002fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fd0:	08003029 	.word	0x08003029
 8002fd4:	0800303d 	.word	0x0800303d
 8002fd8:	08002fb9 	.word	0x08002fb9
 8002fdc:	08002fb9 	.word	0x08002fb9
 8002fe0:	08002fb9 	.word	0x08002fb9
 8002fe4:	08002fb9 	.word	0x08002fb9
 8002fe8:	0800303d 	.word	0x0800303d
 8002fec:	08002fb9 	.word	0x08002fb9
 8002ff0:	08002fb9 	.word	0x08002fb9
 8002ff4:	08002fb9 	.word	0x08002fb9
 8002ff8:	08002fb9 	.word	0x08002fb9
 8002ffc:	08003149 	.word	0x08003149
 8003000:	0800306d 	.word	0x0800306d
 8003004:	0800312b 	.word	0x0800312b
 8003008:	08002fb9 	.word	0x08002fb9
 800300c:	08002fb9 	.word	0x08002fb9
 8003010:	0800316b 	.word	0x0800316b
 8003014:	08002fb9 	.word	0x08002fb9
 8003018:	0800306d 	.word	0x0800306d
 800301c:	08002fb9 	.word	0x08002fb9
 8003020:	08002fb9 	.word	0x08002fb9
 8003024:	08003133 	.word	0x08003133
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	1d1a      	adds	r2, r3, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	602a      	str	r2, [r5, #0]
 8003030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003038:	2301      	movs	r3, #1
 800303a:	e0a3      	b.n	8003184 <_printf_i+0x1f4>
 800303c:	6820      	ldr	r0, [r4, #0]
 800303e:	6829      	ldr	r1, [r5, #0]
 8003040:	0606      	lsls	r6, r0, #24
 8003042:	f101 0304 	add.w	r3, r1, #4
 8003046:	d50a      	bpl.n	800305e <_printf_i+0xce>
 8003048:	680e      	ldr	r6, [r1, #0]
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	2e00      	cmp	r6, #0
 800304e:	da03      	bge.n	8003058 <_printf_i+0xc8>
 8003050:	232d      	movs	r3, #45	; 0x2d
 8003052:	4276      	negs	r6, r6
 8003054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003058:	485e      	ldr	r0, [pc, #376]	; (80031d4 <_printf_i+0x244>)
 800305a:	230a      	movs	r3, #10
 800305c:	e019      	b.n	8003092 <_printf_i+0x102>
 800305e:	680e      	ldr	r6, [r1, #0]
 8003060:	602b      	str	r3, [r5, #0]
 8003062:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003066:	bf18      	it	ne
 8003068:	b236      	sxthne	r6, r6
 800306a:	e7ef      	b.n	800304c <_printf_i+0xbc>
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	6820      	ldr	r0, [r4, #0]
 8003070:	1d19      	adds	r1, r3, #4
 8003072:	6029      	str	r1, [r5, #0]
 8003074:	0601      	lsls	r1, r0, #24
 8003076:	d501      	bpl.n	800307c <_printf_i+0xec>
 8003078:	681e      	ldr	r6, [r3, #0]
 800307a:	e002      	b.n	8003082 <_printf_i+0xf2>
 800307c:	0646      	lsls	r6, r0, #25
 800307e:	d5fb      	bpl.n	8003078 <_printf_i+0xe8>
 8003080:	881e      	ldrh	r6, [r3, #0]
 8003082:	4854      	ldr	r0, [pc, #336]	; (80031d4 <_printf_i+0x244>)
 8003084:	2f6f      	cmp	r7, #111	; 0x6f
 8003086:	bf0c      	ite	eq
 8003088:	2308      	moveq	r3, #8
 800308a:	230a      	movne	r3, #10
 800308c:	2100      	movs	r1, #0
 800308e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003092:	6865      	ldr	r5, [r4, #4]
 8003094:	60a5      	str	r5, [r4, #8]
 8003096:	2d00      	cmp	r5, #0
 8003098:	bfa2      	ittt	ge
 800309a:	6821      	ldrge	r1, [r4, #0]
 800309c:	f021 0104 	bicge.w	r1, r1, #4
 80030a0:	6021      	strge	r1, [r4, #0]
 80030a2:	b90e      	cbnz	r6, 80030a8 <_printf_i+0x118>
 80030a4:	2d00      	cmp	r5, #0
 80030a6:	d04d      	beq.n	8003144 <_printf_i+0x1b4>
 80030a8:	4615      	mov	r5, r2
 80030aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80030ae:	fb03 6711 	mls	r7, r3, r1, r6
 80030b2:	5dc7      	ldrb	r7, [r0, r7]
 80030b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030b8:	4637      	mov	r7, r6
 80030ba:	42bb      	cmp	r3, r7
 80030bc:	460e      	mov	r6, r1
 80030be:	d9f4      	bls.n	80030aa <_printf_i+0x11a>
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d10b      	bne.n	80030dc <_printf_i+0x14c>
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	07de      	lsls	r6, r3, #31
 80030c8:	d508      	bpl.n	80030dc <_printf_i+0x14c>
 80030ca:	6923      	ldr	r3, [r4, #16]
 80030cc:	6861      	ldr	r1, [r4, #4]
 80030ce:	4299      	cmp	r1, r3
 80030d0:	bfde      	ittt	le
 80030d2:	2330      	movle	r3, #48	; 0x30
 80030d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80030dc:	1b52      	subs	r2, r2, r5
 80030de:	6122      	str	r2, [r4, #16]
 80030e0:	f8cd a000 	str.w	sl, [sp]
 80030e4:	464b      	mov	r3, r9
 80030e6:	aa03      	add	r2, sp, #12
 80030e8:	4621      	mov	r1, r4
 80030ea:	4640      	mov	r0, r8
 80030ec:	f7ff fee2 	bl	8002eb4 <_printf_common>
 80030f0:	3001      	adds	r0, #1
 80030f2:	d14c      	bne.n	800318e <_printf_i+0x1fe>
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f8:	b004      	add	sp, #16
 80030fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030fe:	4835      	ldr	r0, [pc, #212]	; (80031d4 <_printf_i+0x244>)
 8003100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003104:	6829      	ldr	r1, [r5, #0]
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	f851 6b04 	ldr.w	r6, [r1], #4
 800310c:	6029      	str	r1, [r5, #0]
 800310e:	061d      	lsls	r5, r3, #24
 8003110:	d514      	bpl.n	800313c <_printf_i+0x1ac>
 8003112:	07df      	lsls	r7, r3, #31
 8003114:	bf44      	itt	mi
 8003116:	f043 0320 	orrmi.w	r3, r3, #32
 800311a:	6023      	strmi	r3, [r4, #0]
 800311c:	b91e      	cbnz	r6, 8003126 <_printf_i+0x196>
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	f023 0320 	bic.w	r3, r3, #32
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	2310      	movs	r3, #16
 8003128:	e7b0      	b.n	800308c <_printf_i+0xfc>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	f043 0320 	orr.w	r3, r3, #32
 8003130:	6023      	str	r3, [r4, #0]
 8003132:	2378      	movs	r3, #120	; 0x78
 8003134:	4828      	ldr	r0, [pc, #160]	; (80031d8 <_printf_i+0x248>)
 8003136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800313a:	e7e3      	b.n	8003104 <_printf_i+0x174>
 800313c:	0659      	lsls	r1, r3, #25
 800313e:	bf48      	it	mi
 8003140:	b2b6      	uxthmi	r6, r6
 8003142:	e7e6      	b.n	8003112 <_printf_i+0x182>
 8003144:	4615      	mov	r5, r2
 8003146:	e7bb      	b.n	80030c0 <_printf_i+0x130>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	6826      	ldr	r6, [r4, #0]
 800314c:	6961      	ldr	r1, [r4, #20]
 800314e:	1d18      	adds	r0, r3, #4
 8003150:	6028      	str	r0, [r5, #0]
 8003152:	0635      	lsls	r5, r6, #24
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	d501      	bpl.n	800315c <_printf_i+0x1cc>
 8003158:	6019      	str	r1, [r3, #0]
 800315a:	e002      	b.n	8003162 <_printf_i+0x1d2>
 800315c:	0670      	lsls	r0, r6, #25
 800315e:	d5fb      	bpl.n	8003158 <_printf_i+0x1c8>
 8003160:	8019      	strh	r1, [r3, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	6123      	str	r3, [r4, #16]
 8003166:	4615      	mov	r5, r2
 8003168:	e7ba      	b.n	80030e0 <_printf_i+0x150>
 800316a:	682b      	ldr	r3, [r5, #0]
 800316c:	1d1a      	adds	r2, r3, #4
 800316e:	602a      	str	r2, [r5, #0]
 8003170:	681d      	ldr	r5, [r3, #0]
 8003172:	6862      	ldr	r2, [r4, #4]
 8003174:	2100      	movs	r1, #0
 8003176:	4628      	mov	r0, r5
 8003178:	f7fd f852 	bl	8000220 <memchr>
 800317c:	b108      	cbz	r0, 8003182 <_printf_i+0x1f2>
 800317e:	1b40      	subs	r0, r0, r5
 8003180:	6060      	str	r0, [r4, #4]
 8003182:	6863      	ldr	r3, [r4, #4]
 8003184:	6123      	str	r3, [r4, #16]
 8003186:	2300      	movs	r3, #0
 8003188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800318c:	e7a8      	b.n	80030e0 <_printf_i+0x150>
 800318e:	6923      	ldr	r3, [r4, #16]
 8003190:	462a      	mov	r2, r5
 8003192:	4649      	mov	r1, r9
 8003194:	4640      	mov	r0, r8
 8003196:	47d0      	blx	sl
 8003198:	3001      	adds	r0, #1
 800319a:	d0ab      	beq.n	80030f4 <_printf_i+0x164>
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	079b      	lsls	r3, r3, #30
 80031a0:	d413      	bmi.n	80031ca <_printf_i+0x23a>
 80031a2:	68e0      	ldr	r0, [r4, #12]
 80031a4:	9b03      	ldr	r3, [sp, #12]
 80031a6:	4298      	cmp	r0, r3
 80031a8:	bfb8      	it	lt
 80031aa:	4618      	movlt	r0, r3
 80031ac:	e7a4      	b.n	80030f8 <_printf_i+0x168>
 80031ae:	2301      	movs	r3, #1
 80031b0:	4632      	mov	r2, r6
 80031b2:	4649      	mov	r1, r9
 80031b4:	4640      	mov	r0, r8
 80031b6:	47d0      	blx	sl
 80031b8:	3001      	adds	r0, #1
 80031ba:	d09b      	beq.n	80030f4 <_printf_i+0x164>
 80031bc:	3501      	adds	r5, #1
 80031be:	68e3      	ldr	r3, [r4, #12]
 80031c0:	9903      	ldr	r1, [sp, #12]
 80031c2:	1a5b      	subs	r3, r3, r1
 80031c4:	42ab      	cmp	r3, r5
 80031c6:	dcf2      	bgt.n	80031ae <_printf_i+0x21e>
 80031c8:	e7eb      	b.n	80031a2 <_printf_i+0x212>
 80031ca:	2500      	movs	r5, #0
 80031cc:	f104 0619 	add.w	r6, r4, #25
 80031d0:	e7f5      	b.n	80031be <_printf_i+0x22e>
 80031d2:	bf00      	nop
 80031d4:	08004369 	.word	0x08004369
 80031d8:	0800437a 	.word	0x0800437a

080031dc <_puts_r>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	460e      	mov	r6, r1
 80031e0:	4605      	mov	r5, r0
 80031e2:	b118      	cbz	r0, 80031ec <_puts_r+0x10>
 80031e4:	6983      	ldr	r3, [r0, #24]
 80031e6:	b90b      	cbnz	r3, 80031ec <_puts_r+0x10>
 80031e8:	f000 fbfa 	bl	80039e0 <__sinit>
 80031ec:	69ab      	ldr	r3, [r5, #24]
 80031ee:	68ac      	ldr	r4, [r5, #8]
 80031f0:	b913      	cbnz	r3, 80031f8 <_puts_r+0x1c>
 80031f2:	4628      	mov	r0, r5
 80031f4:	f000 fbf4 	bl	80039e0 <__sinit>
 80031f8:	4b2c      	ldr	r3, [pc, #176]	; (80032ac <_puts_r+0xd0>)
 80031fa:	429c      	cmp	r4, r3
 80031fc:	d120      	bne.n	8003240 <_puts_r+0x64>
 80031fe:	686c      	ldr	r4, [r5, #4]
 8003200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003202:	07db      	lsls	r3, r3, #31
 8003204:	d405      	bmi.n	8003212 <_puts_r+0x36>
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	0598      	lsls	r0, r3, #22
 800320a:	d402      	bmi.n	8003212 <_puts_r+0x36>
 800320c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800320e:	f000 fc85 	bl	8003b1c <__retarget_lock_acquire_recursive>
 8003212:	89a3      	ldrh	r3, [r4, #12]
 8003214:	0719      	lsls	r1, r3, #28
 8003216:	d51d      	bpl.n	8003254 <_puts_r+0x78>
 8003218:	6923      	ldr	r3, [r4, #16]
 800321a:	b1db      	cbz	r3, 8003254 <_puts_r+0x78>
 800321c:	3e01      	subs	r6, #1
 800321e:	68a3      	ldr	r3, [r4, #8]
 8003220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003224:	3b01      	subs	r3, #1
 8003226:	60a3      	str	r3, [r4, #8]
 8003228:	bb39      	cbnz	r1, 800327a <_puts_r+0x9e>
 800322a:	2b00      	cmp	r3, #0
 800322c:	da38      	bge.n	80032a0 <_puts_r+0xc4>
 800322e:	4622      	mov	r2, r4
 8003230:	210a      	movs	r1, #10
 8003232:	4628      	mov	r0, r5
 8003234:	f000 f9f2 	bl	800361c <__swbuf_r>
 8003238:	3001      	adds	r0, #1
 800323a:	d011      	beq.n	8003260 <_puts_r+0x84>
 800323c:	250a      	movs	r5, #10
 800323e:	e011      	b.n	8003264 <_puts_r+0x88>
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <_puts_r+0xd4>)
 8003242:	429c      	cmp	r4, r3
 8003244:	d101      	bne.n	800324a <_puts_r+0x6e>
 8003246:	68ac      	ldr	r4, [r5, #8]
 8003248:	e7da      	b.n	8003200 <_puts_r+0x24>
 800324a:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <_puts_r+0xd8>)
 800324c:	429c      	cmp	r4, r3
 800324e:	bf08      	it	eq
 8003250:	68ec      	ldreq	r4, [r5, #12]
 8003252:	e7d5      	b.n	8003200 <_puts_r+0x24>
 8003254:	4621      	mov	r1, r4
 8003256:	4628      	mov	r0, r5
 8003258:	f000 fa32 	bl	80036c0 <__swsetup_r>
 800325c:	2800      	cmp	r0, #0
 800325e:	d0dd      	beq.n	800321c <_puts_r+0x40>
 8003260:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003266:	07da      	lsls	r2, r3, #31
 8003268:	d405      	bmi.n	8003276 <_puts_r+0x9a>
 800326a:	89a3      	ldrh	r3, [r4, #12]
 800326c:	059b      	lsls	r3, r3, #22
 800326e:	d402      	bmi.n	8003276 <_puts_r+0x9a>
 8003270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003272:	f000 fc54 	bl	8003b1e <__retarget_lock_release_recursive>
 8003276:	4628      	mov	r0, r5
 8003278:	bd70      	pop	{r4, r5, r6, pc}
 800327a:	2b00      	cmp	r3, #0
 800327c:	da04      	bge.n	8003288 <_puts_r+0xac>
 800327e:	69a2      	ldr	r2, [r4, #24]
 8003280:	429a      	cmp	r2, r3
 8003282:	dc06      	bgt.n	8003292 <_puts_r+0xb6>
 8003284:	290a      	cmp	r1, #10
 8003286:	d004      	beq.n	8003292 <_puts_r+0xb6>
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	6022      	str	r2, [r4, #0]
 800328e:	7019      	strb	r1, [r3, #0]
 8003290:	e7c5      	b.n	800321e <_puts_r+0x42>
 8003292:	4622      	mov	r2, r4
 8003294:	4628      	mov	r0, r5
 8003296:	f000 f9c1 	bl	800361c <__swbuf_r>
 800329a:	3001      	adds	r0, #1
 800329c:	d1bf      	bne.n	800321e <_puts_r+0x42>
 800329e:	e7df      	b.n	8003260 <_puts_r+0x84>
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	250a      	movs	r5, #10
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	6022      	str	r2, [r4, #0]
 80032a8:	701d      	strb	r5, [r3, #0]
 80032aa:	e7db      	b.n	8003264 <_puts_r+0x88>
 80032ac:	08004548 	.word	0x08004548
 80032b0:	08004568 	.word	0x08004568
 80032b4:	08004528 	.word	0x08004528

080032b8 <puts>:
 80032b8:	4b02      	ldr	r3, [pc, #8]	; (80032c4 <puts+0xc>)
 80032ba:	4601      	mov	r1, r0
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	f7ff bf8d 	b.w	80031dc <_puts_r>
 80032c2:	bf00      	nop
 80032c4:	2000002c 	.word	0x2000002c

080032c8 <_sbrk_r>:
 80032c8:	b538      	push	{r3, r4, r5, lr}
 80032ca:	4d06      	ldr	r5, [pc, #24]	; (80032e4 <_sbrk_r+0x1c>)
 80032cc:	2300      	movs	r3, #0
 80032ce:	4604      	mov	r4, r0
 80032d0:	4608      	mov	r0, r1
 80032d2:	602b      	str	r3, [r5, #0]
 80032d4:	f7fd fec4 	bl	8001060 <_sbrk>
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	d102      	bne.n	80032e2 <_sbrk_r+0x1a>
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	b103      	cbz	r3, 80032e2 <_sbrk_r+0x1a>
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	bd38      	pop	{r3, r4, r5, pc}
 80032e4:	20000150 	.word	0x20000150

080032e8 <siprintf>:
 80032e8:	b40e      	push	{r1, r2, r3}
 80032ea:	b500      	push	{lr}
 80032ec:	b09c      	sub	sp, #112	; 0x70
 80032ee:	ab1d      	add	r3, sp, #116	; 0x74
 80032f0:	9002      	str	r0, [sp, #8]
 80032f2:	9006      	str	r0, [sp, #24]
 80032f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032f8:	4809      	ldr	r0, [pc, #36]	; (8003320 <siprintf+0x38>)
 80032fa:	9107      	str	r1, [sp, #28]
 80032fc:	9104      	str	r1, [sp, #16]
 80032fe:	4909      	ldr	r1, [pc, #36]	; (8003324 <siprintf+0x3c>)
 8003300:	f853 2b04 	ldr.w	r2, [r3], #4
 8003304:	9105      	str	r1, [sp, #20]
 8003306:	6800      	ldr	r0, [r0, #0]
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	a902      	add	r1, sp, #8
 800330c:	f000 fd2c 	bl	8003d68 <_svfiprintf_r>
 8003310:	9b02      	ldr	r3, [sp, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	b01c      	add	sp, #112	; 0x70
 8003318:	f85d eb04 	ldr.w	lr, [sp], #4
 800331c:	b003      	add	sp, #12
 800331e:	4770      	bx	lr
 8003320:	2000002c 	.word	0x2000002c
 8003324:	ffff0208 	.word	0xffff0208

08003328 <strcat>:
 8003328:	b510      	push	{r4, lr}
 800332a:	4602      	mov	r2, r0
 800332c:	7814      	ldrb	r4, [r2, #0]
 800332e:	4613      	mov	r3, r2
 8003330:	3201      	adds	r2, #1
 8003332:	2c00      	cmp	r4, #0
 8003334:	d1fa      	bne.n	800332c <strcat+0x4>
 8003336:	3b01      	subs	r3, #1
 8003338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800333c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003340:	2a00      	cmp	r2, #0
 8003342:	d1f9      	bne.n	8003338 <strcat+0x10>
 8003344:	bd10      	pop	{r4, pc}

08003346 <strchr>:
 8003346:	b2c9      	uxtb	r1, r1
 8003348:	4603      	mov	r3, r0
 800334a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800334e:	b11a      	cbz	r2, 8003358 <strchr+0x12>
 8003350:	428a      	cmp	r2, r1
 8003352:	d1f9      	bne.n	8003348 <strchr+0x2>
 8003354:	4618      	mov	r0, r3
 8003356:	4770      	bx	lr
 8003358:	2900      	cmp	r1, #0
 800335a:	bf18      	it	ne
 800335c:	2300      	movne	r3, #0
 800335e:	e7f9      	b.n	8003354 <strchr+0xe>

08003360 <strdup>:
 8003360:	4b02      	ldr	r3, [pc, #8]	; (800336c <strdup+0xc>)
 8003362:	4601      	mov	r1, r0
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	f000 b803 	b.w	8003370 <_strdup_r>
 800336a:	bf00      	nop
 800336c:	2000002c 	.word	0x2000002c

08003370 <_strdup_r>:
 8003370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003372:	4604      	mov	r4, r0
 8003374:	4608      	mov	r0, r1
 8003376:	460d      	mov	r5, r1
 8003378:	f7fc ff4a 	bl	8000210 <strlen>
 800337c:	1c42      	adds	r2, r0, #1
 800337e:	4611      	mov	r1, r2
 8003380:	4620      	mov	r0, r4
 8003382:	9201      	str	r2, [sp, #4]
 8003384:	f7ff fbc8 	bl	8002b18 <_malloc_r>
 8003388:	4604      	mov	r4, r0
 800338a:	b118      	cbz	r0, 8003394 <_strdup_r+0x24>
 800338c:	9a01      	ldr	r2, [sp, #4]
 800338e:	4629      	mov	r1, r5
 8003390:	f000 fc2c 	bl	8003bec <memcpy>
 8003394:	4620      	mov	r0, r4
 8003396:	b003      	add	sp, #12
 8003398:	bd30      	pop	{r4, r5, pc}

0800339a <strstr>:
 800339a:	780a      	ldrb	r2, [r1, #0]
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	b96a      	cbnz	r2, 80033bc <strstr+0x22>
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d109      	bne.n	80033ba <strstr+0x20>
 80033a6:	460c      	mov	r4, r1
 80033a8:	4605      	mov	r5, r0
 80033aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f6      	beq.n	80033a0 <strstr+0x6>
 80033b2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80033b6:	429e      	cmp	r6, r3
 80033b8:	d0f7      	beq.n	80033aa <strstr+0x10>
 80033ba:	3001      	adds	r0, #1
 80033bc:	7803      	ldrb	r3, [r0, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ef      	bne.n	80033a2 <strstr+0x8>
 80033c2:	4618      	mov	r0, r3
 80033c4:	e7ec      	b.n	80033a0 <strstr+0x6>
	...

080033c8 <strtok>:
 80033c8:	4b16      	ldr	r3, [pc, #88]	; (8003424 <strtok+0x5c>)
 80033ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033cc:	681e      	ldr	r6, [r3, #0]
 80033ce:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80033d0:	4605      	mov	r5, r0
 80033d2:	b9fc      	cbnz	r4, 8003414 <strtok+0x4c>
 80033d4:	2050      	movs	r0, #80	; 0x50
 80033d6:	9101      	str	r1, [sp, #4]
 80033d8:	f7ff fb1a 	bl	8002a10 <malloc>
 80033dc:	9901      	ldr	r1, [sp, #4]
 80033de:	65b0      	str	r0, [r6, #88]	; 0x58
 80033e0:	4602      	mov	r2, r0
 80033e2:	b920      	cbnz	r0, 80033ee <strtok+0x26>
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <strtok+0x60>)
 80033e6:	4811      	ldr	r0, [pc, #68]	; (800342c <strtok+0x64>)
 80033e8:	2157      	movs	r1, #87	; 0x57
 80033ea:	f7ff fa99 	bl	8002920 <__assert_func>
 80033ee:	e9c0 4400 	strd	r4, r4, [r0]
 80033f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80033f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80033fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80033fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003402:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003406:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800340a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800340e:	6184      	str	r4, [r0, #24]
 8003410:	7704      	strb	r4, [r0, #28]
 8003412:	6244      	str	r4, [r0, #36]	; 0x24
 8003414:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003416:	2301      	movs	r3, #1
 8003418:	4628      	mov	r0, r5
 800341a:	b002      	add	sp, #8
 800341c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003420:	f000 b806 	b.w	8003430 <__strtok_r>
 8003424:	2000002c 	.word	0x2000002c
 8003428:	0800438b 	.word	0x0800438b
 800342c:	080043a2 	.word	0x080043a2

08003430 <__strtok_r>:
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b908      	cbnz	r0, 8003438 <__strtok_r+0x8>
 8003434:	6810      	ldr	r0, [r2, #0]
 8003436:	b188      	cbz	r0, 800345c <__strtok_r+0x2c>
 8003438:	4604      	mov	r4, r0
 800343a:	4620      	mov	r0, r4
 800343c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003440:	460f      	mov	r7, r1
 8003442:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003446:	b91e      	cbnz	r6, 8003450 <__strtok_r+0x20>
 8003448:	b965      	cbnz	r5, 8003464 <__strtok_r+0x34>
 800344a:	6015      	str	r5, [r2, #0]
 800344c:	4628      	mov	r0, r5
 800344e:	e005      	b.n	800345c <__strtok_r+0x2c>
 8003450:	42b5      	cmp	r5, r6
 8003452:	d1f6      	bne.n	8003442 <__strtok_r+0x12>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f0      	bne.n	800343a <__strtok_r+0xa>
 8003458:	6014      	str	r4, [r2, #0]
 800345a:	7003      	strb	r3, [r0, #0]
 800345c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345e:	461c      	mov	r4, r3
 8003460:	e00c      	b.n	800347c <__strtok_r+0x4c>
 8003462:	b915      	cbnz	r5, 800346a <__strtok_r+0x3a>
 8003464:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003468:	460e      	mov	r6, r1
 800346a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800346e:	42ab      	cmp	r3, r5
 8003470:	d1f7      	bne.n	8003462 <__strtok_r+0x32>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f3      	beq.n	800345e <__strtok_r+0x2e>
 8003476:	2300      	movs	r3, #0
 8003478:	f804 3c01 	strb.w	r3, [r4, #-1]
 800347c:	6014      	str	r4, [r2, #0]
 800347e:	e7ed      	b.n	800345c <__strtok_r+0x2c>

08003480 <_strtol_l.constprop.0>:
 8003480:	2b01      	cmp	r3, #1
 8003482:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003486:	d001      	beq.n	800348c <_strtol_l.constprop.0+0xc>
 8003488:	2b24      	cmp	r3, #36	; 0x24
 800348a:	d906      	bls.n	800349a <_strtol_l.constprop.0+0x1a>
 800348c:	f7ff fa6a 	bl	8002964 <__errno>
 8003490:	2316      	movs	r3, #22
 8003492:	6003      	str	r3, [r0, #0]
 8003494:	2000      	movs	r0, #0
 8003496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003580 <_strtol_l.constprop.0+0x100>
 800349e:	460d      	mov	r5, r1
 80034a0:	462e      	mov	r6, r5
 80034a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80034aa:	f017 0708 	ands.w	r7, r7, #8
 80034ae:	d1f7      	bne.n	80034a0 <_strtol_l.constprop.0+0x20>
 80034b0:	2c2d      	cmp	r4, #45	; 0x2d
 80034b2:	d132      	bne.n	800351a <_strtol_l.constprop.0+0x9a>
 80034b4:	782c      	ldrb	r4, [r5, #0]
 80034b6:	2701      	movs	r7, #1
 80034b8:	1cb5      	adds	r5, r6, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d05b      	beq.n	8003576 <_strtol_l.constprop.0+0xf6>
 80034be:	2b10      	cmp	r3, #16
 80034c0:	d109      	bne.n	80034d6 <_strtol_l.constprop.0+0x56>
 80034c2:	2c30      	cmp	r4, #48	; 0x30
 80034c4:	d107      	bne.n	80034d6 <_strtol_l.constprop.0+0x56>
 80034c6:	782c      	ldrb	r4, [r5, #0]
 80034c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80034cc:	2c58      	cmp	r4, #88	; 0x58
 80034ce:	d14d      	bne.n	800356c <_strtol_l.constprop.0+0xec>
 80034d0:	786c      	ldrb	r4, [r5, #1]
 80034d2:	2310      	movs	r3, #16
 80034d4:	3502      	adds	r5, #2
 80034d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80034da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80034de:	f04f 0c00 	mov.w	ip, #0
 80034e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80034e6:	4666      	mov	r6, ip
 80034e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80034ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80034f0:	f1be 0f09 	cmp.w	lr, #9
 80034f4:	d816      	bhi.n	8003524 <_strtol_l.constprop.0+0xa4>
 80034f6:	4674      	mov	r4, lr
 80034f8:	42a3      	cmp	r3, r4
 80034fa:	dd24      	ble.n	8003546 <_strtol_l.constprop.0+0xc6>
 80034fc:	f1bc 0f00 	cmp.w	ip, #0
 8003500:	db1e      	blt.n	8003540 <_strtol_l.constprop.0+0xc0>
 8003502:	45b1      	cmp	r9, r6
 8003504:	d31c      	bcc.n	8003540 <_strtol_l.constprop.0+0xc0>
 8003506:	d101      	bne.n	800350c <_strtol_l.constprop.0+0x8c>
 8003508:	45a2      	cmp	sl, r4
 800350a:	db19      	blt.n	8003540 <_strtol_l.constprop.0+0xc0>
 800350c:	fb06 4603 	mla	r6, r6, r3, r4
 8003510:	f04f 0c01 	mov.w	ip, #1
 8003514:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003518:	e7e8      	b.n	80034ec <_strtol_l.constprop.0+0x6c>
 800351a:	2c2b      	cmp	r4, #43	; 0x2b
 800351c:	bf04      	itt	eq
 800351e:	782c      	ldrbeq	r4, [r5, #0]
 8003520:	1cb5      	addeq	r5, r6, #2
 8003522:	e7ca      	b.n	80034ba <_strtol_l.constprop.0+0x3a>
 8003524:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003528:	f1be 0f19 	cmp.w	lr, #25
 800352c:	d801      	bhi.n	8003532 <_strtol_l.constprop.0+0xb2>
 800352e:	3c37      	subs	r4, #55	; 0x37
 8003530:	e7e2      	b.n	80034f8 <_strtol_l.constprop.0+0x78>
 8003532:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003536:	f1be 0f19 	cmp.w	lr, #25
 800353a:	d804      	bhi.n	8003546 <_strtol_l.constprop.0+0xc6>
 800353c:	3c57      	subs	r4, #87	; 0x57
 800353e:	e7db      	b.n	80034f8 <_strtol_l.constprop.0+0x78>
 8003540:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003544:	e7e6      	b.n	8003514 <_strtol_l.constprop.0+0x94>
 8003546:	f1bc 0f00 	cmp.w	ip, #0
 800354a:	da05      	bge.n	8003558 <_strtol_l.constprop.0+0xd8>
 800354c:	2322      	movs	r3, #34	; 0x22
 800354e:	6003      	str	r3, [r0, #0]
 8003550:	4646      	mov	r6, r8
 8003552:	b942      	cbnz	r2, 8003566 <_strtol_l.constprop.0+0xe6>
 8003554:	4630      	mov	r0, r6
 8003556:	e79e      	b.n	8003496 <_strtol_l.constprop.0+0x16>
 8003558:	b107      	cbz	r7, 800355c <_strtol_l.constprop.0+0xdc>
 800355a:	4276      	negs	r6, r6
 800355c:	2a00      	cmp	r2, #0
 800355e:	d0f9      	beq.n	8003554 <_strtol_l.constprop.0+0xd4>
 8003560:	f1bc 0f00 	cmp.w	ip, #0
 8003564:	d000      	beq.n	8003568 <_strtol_l.constprop.0+0xe8>
 8003566:	1e69      	subs	r1, r5, #1
 8003568:	6011      	str	r1, [r2, #0]
 800356a:	e7f3      	b.n	8003554 <_strtol_l.constprop.0+0xd4>
 800356c:	2430      	movs	r4, #48	; 0x30
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1b1      	bne.n	80034d6 <_strtol_l.constprop.0+0x56>
 8003572:	2308      	movs	r3, #8
 8003574:	e7af      	b.n	80034d6 <_strtol_l.constprop.0+0x56>
 8003576:	2c30      	cmp	r4, #48	; 0x30
 8003578:	d0a5      	beq.n	80034c6 <_strtol_l.constprop.0+0x46>
 800357a:	230a      	movs	r3, #10
 800357c:	e7ab      	b.n	80034d6 <_strtol_l.constprop.0+0x56>
 800357e:	bf00      	nop
 8003580:	08004425 	.word	0x08004425

08003584 <strtol>:
 8003584:	4613      	mov	r3, r2
 8003586:	460a      	mov	r2, r1
 8003588:	4601      	mov	r1, r0
 800358a:	4802      	ldr	r0, [pc, #8]	; (8003594 <strtol+0x10>)
 800358c:	6800      	ldr	r0, [r0, #0]
 800358e:	f7ff bf77 	b.w	8003480 <_strtol_l.constprop.0>
 8003592:	bf00      	nop
 8003594:	2000002c 	.word	0x2000002c

08003598 <__utoa>:
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	4c1f      	ldr	r4, [pc, #124]	; (8003618 <__utoa+0x80>)
 800359c:	b08b      	sub	sp, #44	; 0x2c
 800359e:	4605      	mov	r5, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	466e      	mov	r6, sp
 80035a4:	f104 0c20 	add.w	ip, r4, #32
 80035a8:	6820      	ldr	r0, [r4, #0]
 80035aa:	6861      	ldr	r1, [r4, #4]
 80035ac:	4637      	mov	r7, r6
 80035ae:	c703      	stmia	r7!, {r0, r1}
 80035b0:	3408      	adds	r4, #8
 80035b2:	4564      	cmp	r4, ip
 80035b4:	463e      	mov	r6, r7
 80035b6:	d1f7      	bne.n	80035a8 <__utoa+0x10>
 80035b8:	7921      	ldrb	r1, [r4, #4]
 80035ba:	7139      	strb	r1, [r7, #4]
 80035bc:	1e91      	subs	r1, r2, #2
 80035be:	6820      	ldr	r0, [r4, #0]
 80035c0:	6038      	str	r0, [r7, #0]
 80035c2:	2922      	cmp	r1, #34	; 0x22
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	d904      	bls.n	80035d4 <__utoa+0x3c>
 80035ca:	7019      	strb	r1, [r3, #0]
 80035cc:	460b      	mov	r3, r1
 80035ce:	4618      	mov	r0, r3
 80035d0:	b00b      	add	sp, #44	; 0x2c
 80035d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d4:	1e58      	subs	r0, r3, #1
 80035d6:	4684      	mov	ip, r0
 80035d8:	fbb5 f7f2 	udiv	r7, r5, r2
 80035dc:	fb02 5617 	mls	r6, r2, r7, r5
 80035e0:	3628      	adds	r6, #40	; 0x28
 80035e2:	446e      	add	r6, sp
 80035e4:	460c      	mov	r4, r1
 80035e6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80035ea:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80035ee:	462e      	mov	r6, r5
 80035f0:	42b2      	cmp	r2, r6
 80035f2:	f101 0101 	add.w	r1, r1, #1
 80035f6:	463d      	mov	r5, r7
 80035f8:	d9ee      	bls.n	80035d8 <__utoa+0x40>
 80035fa:	2200      	movs	r2, #0
 80035fc:	545a      	strb	r2, [r3, r1]
 80035fe:	1919      	adds	r1, r3, r4
 8003600:	1aa5      	subs	r5, r4, r2
 8003602:	42aa      	cmp	r2, r5
 8003604:	dae3      	bge.n	80035ce <__utoa+0x36>
 8003606:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800360a:	780e      	ldrb	r6, [r1, #0]
 800360c:	7006      	strb	r6, [r0, #0]
 800360e:	3201      	adds	r2, #1
 8003610:	f801 5901 	strb.w	r5, [r1], #-1
 8003614:	e7f4      	b.n	8003600 <__utoa+0x68>
 8003616:	bf00      	nop
 8003618:	080043ff 	.word	0x080043ff

0800361c <__swbuf_r>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	460e      	mov	r6, r1
 8003620:	4614      	mov	r4, r2
 8003622:	4605      	mov	r5, r0
 8003624:	b118      	cbz	r0, 800362e <__swbuf_r+0x12>
 8003626:	6983      	ldr	r3, [r0, #24]
 8003628:	b90b      	cbnz	r3, 800362e <__swbuf_r+0x12>
 800362a:	f000 f9d9 	bl	80039e0 <__sinit>
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <__swbuf_r+0x98>)
 8003630:	429c      	cmp	r4, r3
 8003632:	d12b      	bne.n	800368c <__swbuf_r+0x70>
 8003634:	686c      	ldr	r4, [r5, #4]
 8003636:	69a3      	ldr	r3, [r4, #24]
 8003638:	60a3      	str	r3, [r4, #8]
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	071a      	lsls	r2, r3, #28
 800363e:	d52f      	bpl.n	80036a0 <__swbuf_r+0x84>
 8003640:	6923      	ldr	r3, [r4, #16]
 8003642:	b36b      	cbz	r3, 80036a0 <__swbuf_r+0x84>
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	6820      	ldr	r0, [r4, #0]
 8003648:	1ac0      	subs	r0, r0, r3
 800364a:	6963      	ldr	r3, [r4, #20]
 800364c:	b2f6      	uxtb	r6, r6
 800364e:	4283      	cmp	r3, r0
 8003650:	4637      	mov	r7, r6
 8003652:	dc04      	bgt.n	800365e <__swbuf_r+0x42>
 8003654:	4621      	mov	r1, r4
 8003656:	4628      	mov	r0, r5
 8003658:	f000 f92e 	bl	80038b8 <_fflush_r>
 800365c:	bb30      	cbnz	r0, 80036ac <__swbuf_r+0x90>
 800365e:	68a3      	ldr	r3, [r4, #8]
 8003660:	3b01      	subs	r3, #1
 8003662:	60a3      	str	r3, [r4, #8]
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	1c5a      	adds	r2, r3, #1
 8003668:	6022      	str	r2, [r4, #0]
 800366a:	701e      	strb	r6, [r3, #0]
 800366c:	6963      	ldr	r3, [r4, #20]
 800366e:	3001      	adds	r0, #1
 8003670:	4283      	cmp	r3, r0
 8003672:	d004      	beq.n	800367e <__swbuf_r+0x62>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	07db      	lsls	r3, r3, #31
 8003678:	d506      	bpl.n	8003688 <__swbuf_r+0x6c>
 800367a:	2e0a      	cmp	r6, #10
 800367c:	d104      	bne.n	8003688 <__swbuf_r+0x6c>
 800367e:	4621      	mov	r1, r4
 8003680:	4628      	mov	r0, r5
 8003682:	f000 f919 	bl	80038b8 <_fflush_r>
 8003686:	b988      	cbnz	r0, 80036ac <__swbuf_r+0x90>
 8003688:	4638      	mov	r0, r7
 800368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <__swbuf_r+0x9c>)
 800368e:	429c      	cmp	r4, r3
 8003690:	d101      	bne.n	8003696 <__swbuf_r+0x7a>
 8003692:	68ac      	ldr	r4, [r5, #8]
 8003694:	e7cf      	b.n	8003636 <__swbuf_r+0x1a>
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <__swbuf_r+0xa0>)
 8003698:	429c      	cmp	r4, r3
 800369a:	bf08      	it	eq
 800369c:	68ec      	ldreq	r4, [r5, #12]
 800369e:	e7ca      	b.n	8003636 <__swbuf_r+0x1a>
 80036a0:	4621      	mov	r1, r4
 80036a2:	4628      	mov	r0, r5
 80036a4:	f000 f80c 	bl	80036c0 <__swsetup_r>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d0cb      	beq.n	8003644 <__swbuf_r+0x28>
 80036ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80036b0:	e7ea      	b.n	8003688 <__swbuf_r+0x6c>
 80036b2:	bf00      	nop
 80036b4:	08004548 	.word	0x08004548
 80036b8:	08004568 	.word	0x08004568
 80036bc:	08004528 	.word	0x08004528

080036c0 <__swsetup_r>:
 80036c0:	4b32      	ldr	r3, [pc, #200]	; (800378c <__swsetup_r+0xcc>)
 80036c2:	b570      	push	{r4, r5, r6, lr}
 80036c4:	681d      	ldr	r5, [r3, #0]
 80036c6:	4606      	mov	r6, r0
 80036c8:	460c      	mov	r4, r1
 80036ca:	b125      	cbz	r5, 80036d6 <__swsetup_r+0x16>
 80036cc:	69ab      	ldr	r3, [r5, #24]
 80036ce:	b913      	cbnz	r3, 80036d6 <__swsetup_r+0x16>
 80036d0:	4628      	mov	r0, r5
 80036d2:	f000 f985 	bl	80039e0 <__sinit>
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <__swsetup_r+0xd0>)
 80036d8:	429c      	cmp	r4, r3
 80036da:	d10f      	bne.n	80036fc <__swsetup_r+0x3c>
 80036dc:	686c      	ldr	r4, [r5, #4]
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036e4:	0719      	lsls	r1, r3, #28
 80036e6:	d42c      	bmi.n	8003742 <__swsetup_r+0x82>
 80036e8:	06dd      	lsls	r5, r3, #27
 80036ea:	d411      	bmi.n	8003710 <__swsetup_r+0x50>
 80036ec:	2309      	movs	r3, #9
 80036ee:	6033      	str	r3, [r6, #0]
 80036f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036f4:	81a3      	strh	r3, [r4, #12]
 80036f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036fa:	e03e      	b.n	800377a <__swsetup_r+0xba>
 80036fc:	4b25      	ldr	r3, [pc, #148]	; (8003794 <__swsetup_r+0xd4>)
 80036fe:	429c      	cmp	r4, r3
 8003700:	d101      	bne.n	8003706 <__swsetup_r+0x46>
 8003702:	68ac      	ldr	r4, [r5, #8]
 8003704:	e7eb      	b.n	80036de <__swsetup_r+0x1e>
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <__swsetup_r+0xd8>)
 8003708:	429c      	cmp	r4, r3
 800370a:	bf08      	it	eq
 800370c:	68ec      	ldreq	r4, [r5, #12]
 800370e:	e7e6      	b.n	80036de <__swsetup_r+0x1e>
 8003710:	0758      	lsls	r0, r3, #29
 8003712:	d512      	bpl.n	800373a <__swsetup_r+0x7a>
 8003714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003716:	b141      	cbz	r1, 800372a <__swsetup_r+0x6a>
 8003718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800371c:	4299      	cmp	r1, r3
 800371e:	d002      	beq.n	8003726 <__swsetup_r+0x66>
 8003720:	4630      	mov	r0, r6
 8003722:	f7ff f98d 	bl	8002a40 <_free_r>
 8003726:	2300      	movs	r3, #0
 8003728:	6363      	str	r3, [r4, #52]	; 0x34
 800372a:	89a3      	ldrh	r3, [r4, #12]
 800372c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003730:	81a3      	strh	r3, [r4, #12]
 8003732:	2300      	movs	r3, #0
 8003734:	6063      	str	r3, [r4, #4]
 8003736:	6923      	ldr	r3, [r4, #16]
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	89a3      	ldrh	r3, [r4, #12]
 800373c:	f043 0308 	orr.w	r3, r3, #8
 8003740:	81a3      	strh	r3, [r4, #12]
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	b94b      	cbnz	r3, 800375a <__swsetup_r+0x9a>
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d003      	beq.n	800375a <__swsetup_r+0x9a>
 8003752:	4621      	mov	r1, r4
 8003754:	4630      	mov	r0, r6
 8003756:	f000 fa09 	bl	8003b6c <__smakebuf_r>
 800375a:	89a0      	ldrh	r0, [r4, #12]
 800375c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003760:	f010 0301 	ands.w	r3, r0, #1
 8003764:	d00a      	beq.n	800377c <__swsetup_r+0xbc>
 8003766:	2300      	movs	r3, #0
 8003768:	60a3      	str	r3, [r4, #8]
 800376a:	6963      	ldr	r3, [r4, #20]
 800376c:	425b      	negs	r3, r3
 800376e:	61a3      	str	r3, [r4, #24]
 8003770:	6923      	ldr	r3, [r4, #16]
 8003772:	b943      	cbnz	r3, 8003786 <__swsetup_r+0xc6>
 8003774:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003778:	d1ba      	bne.n	80036f0 <__swsetup_r+0x30>
 800377a:	bd70      	pop	{r4, r5, r6, pc}
 800377c:	0781      	lsls	r1, r0, #30
 800377e:	bf58      	it	pl
 8003780:	6963      	ldrpl	r3, [r4, #20]
 8003782:	60a3      	str	r3, [r4, #8]
 8003784:	e7f4      	b.n	8003770 <__swsetup_r+0xb0>
 8003786:	2000      	movs	r0, #0
 8003788:	e7f7      	b.n	800377a <__swsetup_r+0xba>
 800378a:	bf00      	nop
 800378c:	2000002c 	.word	0x2000002c
 8003790:	08004548 	.word	0x08004548
 8003794:	08004568 	.word	0x08004568
 8003798:	08004528 	.word	0x08004528

0800379c <abort>:
 800379c:	b508      	push	{r3, lr}
 800379e:	2006      	movs	r0, #6
 80037a0:	f000 fc0a 	bl	8003fb8 <raise>
 80037a4:	2001      	movs	r0, #1
 80037a6:	f7fd fbe3 	bl	8000f70 <_exit>
	...

080037ac <__sflush_r>:
 80037ac:	898a      	ldrh	r2, [r1, #12]
 80037ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037b2:	4605      	mov	r5, r0
 80037b4:	0710      	lsls	r0, r2, #28
 80037b6:	460c      	mov	r4, r1
 80037b8:	d458      	bmi.n	800386c <__sflush_r+0xc0>
 80037ba:	684b      	ldr	r3, [r1, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	dc05      	bgt.n	80037cc <__sflush_r+0x20>
 80037c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	dc02      	bgt.n	80037cc <__sflush_r+0x20>
 80037c6:	2000      	movs	r0, #0
 80037c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037ce:	2e00      	cmp	r6, #0
 80037d0:	d0f9      	beq.n	80037c6 <__sflush_r+0x1a>
 80037d2:	2300      	movs	r3, #0
 80037d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037d8:	682f      	ldr	r7, [r5, #0]
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	d032      	beq.n	8003844 <__sflush_r+0x98>
 80037de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037e0:	89a3      	ldrh	r3, [r4, #12]
 80037e2:	075a      	lsls	r2, r3, #29
 80037e4:	d505      	bpl.n	80037f2 <__sflush_r+0x46>
 80037e6:	6863      	ldr	r3, [r4, #4]
 80037e8:	1ac0      	subs	r0, r0, r3
 80037ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037ec:	b10b      	cbz	r3, 80037f2 <__sflush_r+0x46>
 80037ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037f0:	1ac0      	subs	r0, r0, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	4602      	mov	r2, r0
 80037f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037f8:	6a21      	ldr	r1, [r4, #32]
 80037fa:	4628      	mov	r0, r5
 80037fc:	47b0      	blx	r6
 80037fe:	1c43      	adds	r3, r0, #1
 8003800:	89a3      	ldrh	r3, [r4, #12]
 8003802:	d106      	bne.n	8003812 <__sflush_r+0x66>
 8003804:	6829      	ldr	r1, [r5, #0]
 8003806:	291d      	cmp	r1, #29
 8003808:	d82c      	bhi.n	8003864 <__sflush_r+0xb8>
 800380a:	4a2a      	ldr	r2, [pc, #168]	; (80038b4 <__sflush_r+0x108>)
 800380c:	40ca      	lsrs	r2, r1
 800380e:	07d6      	lsls	r6, r2, #31
 8003810:	d528      	bpl.n	8003864 <__sflush_r+0xb8>
 8003812:	2200      	movs	r2, #0
 8003814:	6062      	str	r2, [r4, #4]
 8003816:	04d9      	lsls	r1, r3, #19
 8003818:	6922      	ldr	r2, [r4, #16]
 800381a:	6022      	str	r2, [r4, #0]
 800381c:	d504      	bpl.n	8003828 <__sflush_r+0x7c>
 800381e:	1c42      	adds	r2, r0, #1
 8003820:	d101      	bne.n	8003826 <__sflush_r+0x7a>
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	b903      	cbnz	r3, 8003828 <__sflush_r+0x7c>
 8003826:	6560      	str	r0, [r4, #84]	; 0x54
 8003828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800382a:	602f      	str	r7, [r5, #0]
 800382c:	2900      	cmp	r1, #0
 800382e:	d0ca      	beq.n	80037c6 <__sflush_r+0x1a>
 8003830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003834:	4299      	cmp	r1, r3
 8003836:	d002      	beq.n	800383e <__sflush_r+0x92>
 8003838:	4628      	mov	r0, r5
 800383a:	f7ff f901 	bl	8002a40 <_free_r>
 800383e:	2000      	movs	r0, #0
 8003840:	6360      	str	r0, [r4, #52]	; 0x34
 8003842:	e7c1      	b.n	80037c8 <__sflush_r+0x1c>
 8003844:	6a21      	ldr	r1, [r4, #32]
 8003846:	2301      	movs	r3, #1
 8003848:	4628      	mov	r0, r5
 800384a:	47b0      	blx	r6
 800384c:	1c41      	adds	r1, r0, #1
 800384e:	d1c7      	bne.n	80037e0 <__sflush_r+0x34>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0c4      	beq.n	80037e0 <__sflush_r+0x34>
 8003856:	2b1d      	cmp	r3, #29
 8003858:	d001      	beq.n	800385e <__sflush_r+0xb2>
 800385a:	2b16      	cmp	r3, #22
 800385c:	d101      	bne.n	8003862 <__sflush_r+0xb6>
 800385e:	602f      	str	r7, [r5, #0]
 8003860:	e7b1      	b.n	80037c6 <__sflush_r+0x1a>
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003868:	81a3      	strh	r3, [r4, #12]
 800386a:	e7ad      	b.n	80037c8 <__sflush_r+0x1c>
 800386c:	690f      	ldr	r7, [r1, #16]
 800386e:	2f00      	cmp	r7, #0
 8003870:	d0a9      	beq.n	80037c6 <__sflush_r+0x1a>
 8003872:	0793      	lsls	r3, r2, #30
 8003874:	680e      	ldr	r6, [r1, #0]
 8003876:	bf08      	it	eq
 8003878:	694b      	ldreq	r3, [r1, #20]
 800387a:	600f      	str	r7, [r1, #0]
 800387c:	bf18      	it	ne
 800387e:	2300      	movne	r3, #0
 8003880:	eba6 0807 	sub.w	r8, r6, r7
 8003884:	608b      	str	r3, [r1, #8]
 8003886:	f1b8 0f00 	cmp.w	r8, #0
 800388a:	dd9c      	ble.n	80037c6 <__sflush_r+0x1a>
 800388c:	6a21      	ldr	r1, [r4, #32]
 800388e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003890:	4643      	mov	r3, r8
 8003892:	463a      	mov	r2, r7
 8003894:	4628      	mov	r0, r5
 8003896:	47b0      	blx	r6
 8003898:	2800      	cmp	r0, #0
 800389a:	dc06      	bgt.n	80038aa <__sflush_r+0xfe>
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a2:	81a3      	strh	r3, [r4, #12]
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038a8:	e78e      	b.n	80037c8 <__sflush_r+0x1c>
 80038aa:	4407      	add	r7, r0
 80038ac:	eba8 0800 	sub.w	r8, r8, r0
 80038b0:	e7e9      	b.n	8003886 <__sflush_r+0xda>
 80038b2:	bf00      	nop
 80038b4:	20400001 	.word	0x20400001

080038b8 <_fflush_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	690b      	ldr	r3, [r1, #16]
 80038bc:	4605      	mov	r5, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	b913      	cbnz	r3, 80038c8 <_fflush_r+0x10>
 80038c2:	2500      	movs	r5, #0
 80038c4:	4628      	mov	r0, r5
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	b118      	cbz	r0, 80038d2 <_fflush_r+0x1a>
 80038ca:	6983      	ldr	r3, [r0, #24]
 80038cc:	b90b      	cbnz	r3, 80038d2 <_fflush_r+0x1a>
 80038ce:	f000 f887 	bl	80039e0 <__sinit>
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <_fflush_r+0x6c>)
 80038d4:	429c      	cmp	r4, r3
 80038d6:	d11b      	bne.n	8003910 <_fflush_r+0x58>
 80038d8:	686c      	ldr	r4, [r5, #4]
 80038da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ef      	beq.n	80038c2 <_fflush_r+0xa>
 80038e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038e4:	07d0      	lsls	r0, r2, #31
 80038e6:	d404      	bmi.n	80038f2 <_fflush_r+0x3a>
 80038e8:	0599      	lsls	r1, r3, #22
 80038ea:	d402      	bmi.n	80038f2 <_fflush_r+0x3a>
 80038ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038ee:	f000 f915 	bl	8003b1c <__retarget_lock_acquire_recursive>
 80038f2:	4628      	mov	r0, r5
 80038f4:	4621      	mov	r1, r4
 80038f6:	f7ff ff59 	bl	80037ac <__sflush_r>
 80038fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038fc:	07da      	lsls	r2, r3, #31
 80038fe:	4605      	mov	r5, r0
 8003900:	d4e0      	bmi.n	80038c4 <_fflush_r+0xc>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	059b      	lsls	r3, r3, #22
 8003906:	d4dd      	bmi.n	80038c4 <_fflush_r+0xc>
 8003908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800390a:	f000 f908 	bl	8003b1e <__retarget_lock_release_recursive>
 800390e:	e7d9      	b.n	80038c4 <_fflush_r+0xc>
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <_fflush_r+0x70>)
 8003912:	429c      	cmp	r4, r3
 8003914:	d101      	bne.n	800391a <_fflush_r+0x62>
 8003916:	68ac      	ldr	r4, [r5, #8]
 8003918:	e7df      	b.n	80038da <_fflush_r+0x22>
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <_fflush_r+0x74>)
 800391c:	429c      	cmp	r4, r3
 800391e:	bf08      	it	eq
 8003920:	68ec      	ldreq	r4, [r5, #12]
 8003922:	e7da      	b.n	80038da <_fflush_r+0x22>
 8003924:	08004548 	.word	0x08004548
 8003928:	08004568 	.word	0x08004568
 800392c:	08004528 	.word	0x08004528

08003930 <std>:
 8003930:	2300      	movs	r3, #0
 8003932:	b510      	push	{r4, lr}
 8003934:	4604      	mov	r4, r0
 8003936:	e9c0 3300 	strd	r3, r3, [r0]
 800393a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800393e:	6083      	str	r3, [r0, #8]
 8003940:	8181      	strh	r1, [r0, #12]
 8003942:	6643      	str	r3, [r0, #100]	; 0x64
 8003944:	81c2      	strh	r2, [r0, #14]
 8003946:	6183      	str	r3, [r0, #24]
 8003948:	4619      	mov	r1, r3
 800394a:	2208      	movs	r2, #8
 800394c:	305c      	adds	r0, #92	; 0x5c
 800394e:	f7ff f86f 	bl	8002a30 <memset>
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <std+0x38>)
 8003954:	6263      	str	r3, [r4, #36]	; 0x24
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <std+0x3c>)
 8003958:	62a3      	str	r3, [r4, #40]	; 0x28
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <std+0x40>)
 800395c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <std+0x44>)
 8003960:	6224      	str	r4, [r4, #32]
 8003962:	6323      	str	r3, [r4, #48]	; 0x30
 8003964:	bd10      	pop	{r4, pc}
 8003966:	bf00      	nop
 8003968:	08003ff1 	.word	0x08003ff1
 800396c:	08004013 	.word	0x08004013
 8003970:	0800404b 	.word	0x0800404b
 8003974:	0800406f 	.word	0x0800406f

08003978 <_cleanup_r>:
 8003978:	4901      	ldr	r1, [pc, #4]	; (8003980 <_cleanup_r+0x8>)
 800397a:	f000 b8af 	b.w	8003adc <_fwalk_reent>
 800397e:	bf00      	nop
 8003980:	080038b9 	.word	0x080038b9

08003984 <__sfmoreglue>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	2268      	movs	r2, #104	; 0x68
 8003988:	1e4d      	subs	r5, r1, #1
 800398a:	4355      	muls	r5, r2
 800398c:	460e      	mov	r6, r1
 800398e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003992:	f7ff f8c1 	bl	8002b18 <_malloc_r>
 8003996:	4604      	mov	r4, r0
 8003998:	b140      	cbz	r0, 80039ac <__sfmoreglue+0x28>
 800399a:	2100      	movs	r1, #0
 800399c:	e9c0 1600 	strd	r1, r6, [r0]
 80039a0:	300c      	adds	r0, #12
 80039a2:	60a0      	str	r0, [r4, #8]
 80039a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039a8:	f7ff f842 	bl	8002a30 <memset>
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd70      	pop	{r4, r5, r6, pc}

080039b0 <__sfp_lock_acquire>:
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <__sfp_lock_acquire+0x8>)
 80039b2:	f000 b8b3 	b.w	8003b1c <__retarget_lock_acquire_recursive>
 80039b6:	bf00      	nop
 80039b8:	2000014d 	.word	0x2000014d

080039bc <__sfp_lock_release>:
 80039bc:	4801      	ldr	r0, [pc, #4]	; (80039c4 <__sfp_lock_release+0x8>)
 80039be:	f000 b8ae 	b.w	8003b1e <__retarget_lock_release_recursive>
 80039c2:	bf00      	nop
 80039c4:	2000014d 	.word	0x2000014d

080039c8 <__sinit_lock_acquire>:
 80039c8:	4801      	ldr	r0, [pc, #4]	; (80039d0 <__sinit_lock_acquire+0x8>)
 80039ca:	f000 b8a7 	b.w	8003b1c <__retarget_lock_acquire_recursive>
 80039ce:	bf00      	nop
 80039d0:	2000014e 	.word	0x2000014e

080039d4 <__sinit_lock_release>:
 80039d4:	4801      	ldr	r0, [pc, #4]	; (80039dc <__sinit_lock_release+0x8>)
 80039d6:	f000 b8a2 	b.w	8003b1e <__retarget_lock_release_recursive>
 80039da:	bf00      	nop
 80039dc:	2000014e 	.word	0x2000014e

080039e0 <__sinit>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	f7ff fff0 	bl	80039c8 <__sinit_lock_acquire>
 80039e8:	69a3      	ldr	r3, [r4, #24]
 80039ea:	b11b      	cbz	r3, 80039f4 <__sinit+0x14>
 80039ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f0:	f7ff bff0 	b.w	80039d4 <__sinit_lock_release>
 80039f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039f8:	6523      	str	r3, [r4, #80]	; 0x50
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <__sinit+0x68>)
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <__sinit+0x6c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	bf04      	itt	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	61a3      	streq	r3, [r4, #24]
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	f000 f820 	bl	8003a50 <__sfp>
 8003a10:	6060      	str	r0, [r4, #4]
 8003a12:	4620      	mov	r0, r4
 8003a14:	f000 f81c 	bl	8003a50 <__sfp>
 8003a18:	60a0      	str	r0, [r4, #8]
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f000 f818 	bl	8003a50 <__sfp>
 8003a20:	2200      	movs	r2, #0
 8003a22:	60e0      	str	r0, [r4, #12]
 8003a24:	2104      	movs	r1, #4
 8003a26:	6860      	ldr	r0, [r4, #4]
 8003a28:	f7ff ff82 	bl	8003930 <std>
 8003a2c:	68a0      	ldr	r0, [r4, #8]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2109      	movs	r1, #9
 8003a32:	f7ff ff7d 	bl	8003930 <std>
 8003a36:	68e0      	ldr	r0, [r4, #12]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	2112      	movs	r1, #18
 8003a3c:	f7ff ff78 	bl	8003930 <std>
 8003a40:	2301      	movs	r3, #1
 8003a42:	61a3      	str	r3, [r4, #24]
 8003a44:	e7d2      	b.n	80039ec <__sinit+0xc>
 8003a46:	bf00      	nop
 8003a48:	08004354 	.word	0x08004354
 8003a4c:	08003979 	.word	0x08003979

08003a50 <__sfp>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	4607      	mov	r7, r0
 8003a54:	f7ff ffac 	bl	80039b0 <__sfp_lock_acquire>
 8003a58:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <__sfp+0x84>)
 8003a5a:	681e      	ldr	r6, [r3, #0]
 8003a5c:	69b3      	ldr	r3, [r6, #24]
 8003a5e:	b913      	cbnz	r3, 8003a66 <__sfp+0x16>
 8003a60:	4630      	mov	r0, r6
 8003a62:	f7ff ffbd 	bl	80039e0 <__sinit>
 8003a66:	3648      	adds	r6, #72	; 0x48
 8003a68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	d503      	bpl.n	8003a78 <__sfp+0x28>
 8003a70:	6833      	ldr	r3, [r6, #0]
 8003a72:	b30b      	cbz	r3, 8003ab8 <__sfp+0x68>
 8003a74:	6836      	ldr	r6, [r6, #0]
 8003a76:	e7f7      	b.n	8003a68 <__sfp+0x18>
 8003a78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a7c:	b9d5      	cbnz	r5, 8003ab4 <__sfp+0x64>
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <__sfp+0x88>)
 8003a80:	60e3      	str	r3, [r4, #12]
 8003a82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a86:	6665      	str	r5, [r4, #100]	; 0x64
 8003a88:	f000 f847 	bl	8003b1a <__retarget_lock_init_recursive>
 8003a8c:	f7ff ff96 	bl	80039bc <__sfp_lock_release>
 8003a90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a98:	6025      	str	r5, [r4, #0]
 8003a9a:	61a5      	str	r5, [r4, #24]
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003aa4:	f7fe ffc4 	bl	8002a30 <memset>
 8003aa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003aac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab4:	3468      	adds	r4, #104	; 0x68
 8003ab6:	e7d9      	b.n	8003a6c <__sfp+0x1c>
 8003ab8:	2104      	movs	r1, #4
 8003aba:	4638      	mov	r0, r7
 8003abc:	f7ff ff62 	bl	8003984 <__sfmoreglue>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	6030      	str	r0, [r6, #0]
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d1d5      	bne.n	8003a74 <__sfp+0x24>
 8003ac8:	f7ff ff78 	bl	80039bc <__sfp_lock_release>
 8003acc:	230c      	movs	r3, #12
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	e7ee      	b.n	8003ab0 <__sfp+0x60>
 8003ad2:	bf00      	nop
 8003ad4:	08004354 	.word	0x08004354
 8003ad8:	ffff0001 	.word	0xffff0001

08003adc <_fwalk_reent>:
 8003adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	4688      	mov	r8, r1
 8003ae4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ae8:	2700      	movs	r7, #0
 8003aea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aee:	f1b9 0901 	subs.w	r9, r9, #1
 8003af2:	d505      	bpl.n	8003b00 <_fwalk_reent+0x24>
 8003af4:	6824      	ldr	r4, [r4, #0]
 8003af6:	2c00      	cmp	r4, #0
 8003af8:	d1f7      	bne.n	8003aea <_fwalk_reent+0xe>
 8003afa:	4638      	mov	r0, r7
 8003afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b00:	89ab      	ldrh	r3, [r5, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d907      	bls.n	8003b16 <_fwalk_reent+0x3a>
 8003b06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	d003      	beq.n	8003b16 <_fwalk_reent+0x3a>
 8003b0e:	4629      	mov	r1, r5
 8003b10:	4630      	mov	r0, r6
 8003b12:	47c0      	blx	r8
 8003b14:	4307      	orrs	r7, r0
 8003b16:	3568      	adds	r5, #104	; 0x68
 8003b18:	e7e9      	b.n	8003aee <_fwalk_reent+0x12>

08003b1a <__retarget_lock_init_recursive>:
 8003b1a:	4770      	bx	lr

08003b1c <__retarget_lock_acquire_recursive>:
 8003b1c:	4770      	bx	lr

08003b1e <__retarget_lock_release_recursive>:
 8003b1e:	4770      	bx	lr

08003b20 <__swhatbuf_r>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	460e      	mov	r6, r1
 8003b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b28:	2900      	cmp	r1, #0
 8003b2a:	b096      	sub	sp, #88	; 0x58
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	461d      	mov	r5, r3
 8003b30:	da08      	bge.n	8003b44 <__swhatbuf_r+0x24>
 8003b32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	602a      	str	r2, [r5, #0]
 8003b3a:	061a      	lsls	r2, r3, #24
 8003b3c:	d410      	bmi.n	8003b60 <__swhatbuf_r+0x40>
 8003b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b42:	e00e      	b.n	8003b62 <__swhatbuf_r+0x42>
 8003b44:	466a      	mov	r2, sp
 8003b46:	f000 fab9 	bl	80040bc <_fstat_r>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	dbf1      	blt.n	8003b32 <__swhatbuf_r+0x12>
 8003b4e:	9a01      	ldr	r2, [sp, #4]
 8003b50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b58:	425a      	negs	r2, r3
 8003b5a:	415a      	adcs	r2, r3
 8003b5c:	602a      	str	r2, [r5, #0]
 8003b5e:	e7ee      	b.n	8003b3e <__swhatbuf_r+0x1e>
 8003b60:	2340      	movs	r3, #64	; 0x40
 8003b62:	2000      	movs	r0, #0
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	b016      	add	sp, #88	; 0x58
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b6c <__smakebuf_r>:
 8003b6c:	898b      	ldrh	r3, [r1, #12]
 8003b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b70:	079d      	lsls	r5, r3, #30
 8003b72:	4606      	mov	r6, r0
 8003b74:	460c      	mov	r4, r1
 8003b76:	d507      	bpl.n	8003b88 <__smakebuf_r+0x1c>
 8003b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	6123      	str	r3, [r4, #16]
 8003b80:	2301      	movs	r3, #1
 8003b82:	6163      	str	r3, [r4, #20]
 8003b84:	b002      	add	sp, #8
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	ab01      	add	r3, sp, #4
 8003b8a:	466a      	mov	r2, sp
 8003b8c:	f7ff ffc8 	bl	8003b20 <__swhatbuf_r>
 8003b90:	9900      	ldr	r1, [sp, #0]
 8003b92:	4605      	mov	r5, r0
 8003b94:	4630      	mov	r0, r6
 8003b96:	f7fe ffbf 	bl	8002b18 <_malloc_r>
 8003b9a:	b948      	cbnz	r0, 8003bb0 <__smakebuf_r+0x44>
 8003b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba0:	059a      	lsls	r2, r3, #22
 8003ba2:	d4ef      	bmi.n	8003b84 <__smakebuf_r+0x18>
 8003ba4:	f023 0303 	bic.w	r3, r3, #3
 8003ba8:	f043 0302 	orr.w	r3, r3, #2
 8003bac:	81a3      	strh	r3, [r4, #12]
 8003bae:	e7e3      	b.n	8003b78 <__smakebuf_r+0xc>
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <__smakebuf_r+0x7c>)
 8003bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	6020      	str	r0, [r4, #0]
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbc:	81a3      	strh	r3, [r4, #12]
 8003bbe:	9b00      	ldr	r3, [sp, #0]
 8003bc0:	6163      	str	r3, [r4, #20]
 8003bc2:	9b01      	ldr	r3, [sp, #4]
 8003bc4:	6120      	str	r0, [r4, #16]
 8003bc6:	b15b      	cbz	r3, 8003be0 <__smakebuf_r+0x74>
 8003bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bcc:	4630      	mov	r0, r6
 8003bce:	f000 fa87 	bl	80040e0 <_isatty_r>
 8003bd2:	b128      	cbz	r0, 8003be0 <__smakebuf_r+0x74>
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	89a0      	ldrh	r0, [r4, #12]
 8003be2:	4305      	orrs	r5, r0
 8003be4:	81a5      	strh	r5, [r4, #12]
 8003be6:	e7cd      	b.n	8003b84 <__smakebuf_r+0x18>
 8003be8:	08003979 	.word	0x08003979

08003bec <memcpy>:
 8003bec:	440a      	add	r2, r1
 8003bee:	4291      	cmp	r1, r2
 8003bf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003bf4:	d100      	bne.n	8003bf8 <memcpy+0xc>
 8003bf6:	4770      	bx	lr
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c02:	4291      	cmp	r1, r2
 8003c04:	d1f9      	bne.n	8003bfa <memcpy+0xe>
 8003c06:	bd10      	pop	{r4, pc}

08003c08 <memmove>:
 8003c08:	4288      	cmp	r0, r1
 8003c0a:	b510      	push	{r4, lr}
 8003c0c:	eb01 0402 	add.w	r4, r1, r2
 8003c10:	d902      	bls.n	8003c18 <memmove+0x10>
 8003c12:	4284      	cmp	r4, r0
 8003c14:	4623      	mov	r3, r4
 8003c16:	d807      	bhi.n	8003c28 <memmove+0x20>
 8003c18:	1e43      	subs	r3, r0, #1
 8003c1a:	42a1      	cmp	r1, r4
 8003c1c:	d008      	beq.n	8003c30 <memmove+0x28>
 8003c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c26:	e7f8      	b.n	8003c1a <memmove+0x12>
 8003c28:	4402      	add	r2, r0
 8003c2a:	4601      	mov	r1, r0
 8003c2c:	428a      	cmp	r2, r1
 8003c2e:	d100      	bne.n	8003c32 <memmove+0x2a>
 8003c30:	bd10      	pop	{r4, pc}
 8003c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c3a:	e7f7      	b.n	8003c2c <memmove+0x24>

08003c3c <__malloc_lock>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	; (8003c44 <__malloc_lock+0x8>)
 8003c3e:	f7ff bf6d 	b.w	8003b1c <__retarget_lock_acquire_recursive>
 8003c42:	bf00      	nop
 8003c44:	2000014c 	.word	0x2000014c

08003c48 <__malloc_unlock>:
 8003c48:	4801      	ldr	r0, [pc, #4]	; (8003c50 <__malloc_unlock+0x8>)
 8003c4a:	f7ff bf68 	b.w	8003b1e <__retarget_lock_release_recursive>
 8003c4e:	bf00      	nop
 8003c50:	2000014c 	.word	0x2000014c

08003c54 <_realloc_r>:
 8003c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c58:	4680      	mov	r8, r0
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	460e      	mov	r6, r1
 8003c5e:	b921      	cbnz	r1, 8003c6a <_realloc_r+0x16>
 8003c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c64:	4611      	mov	r1, r2
 8003c66:	f7fe bf57 	b.w	8002b18 <_malloc_r>
 8003c6a:	b92a      	cbnz	r2, 8003c78 <_realloc_r+0x24>
 8003c6c:	f7fe fee8 	bl	8002a40 <_free_r>
 8003c70:	4625      	mov	r5, r4
 8003c72:	4628      	mov	r0, r5
 8003c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c78:	f000 fa54 	bl	8004124 <_malloc_usable_size_r>
 8003c7c:	4284      	cmp	r4, r0
 8003c7e:	4607      	mov	r7, r0
 8003c80:	d802      	bhi.n	8003c88 <_realloc_r+0x34>
 8003c82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c86:	d812      	bhi.n	8003cae <_realloc_r+0x5a>
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4640      	mov	r0, r8
 8003c8c:	f7fe ff44 	bl	8002b18 <_malloc_r>
 8003c90:	4605      	mov	r5, r0
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d0ed      	beq.n	8003c72 <_realloc_r+0x1e>
 8003c96:	42bc      	cmp	r4, r7
 8003c98:	4622      	mov	r2, r4
 8003c9a:	4631      	mov	r1, r6
 8003c9c:	bf28      	it	cs
 8003c9e:	463a      	movcs	r2, r7
 8003ca0:	f7ff ffa4 	bl	8003bec <memcpy>
 8003ca4:	4631      	mov	r1, r6
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	f7fe feca 	bl	8002a40 <_free_r>
 8003cac:	e7e1      	b.n	8003c72 <_realloc_r+0x1e>
 8003cae:	4635      	mov	r5, r6
 8003cb0:	e7df      	b.n	8003c72 <_realloc_r+0x1e>

08003cb2 <__ssputs_r>:
 8003cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb6:	688e      	ldr	r6, [r1, #8]
 8003cb8:	429e      	cmp	r6, r3
 8003cba:	4682      	mov	sl, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	4690      	mov	r8, r2
 8003cc0:	461f      	mov	r7, r3
 8003cc2:	d838      	bhi.n	8003d36 <__ssputs_r+0x84>
 8003cc4:	898a      	ldrh	r2, [r1, #12]
 8003cc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cca:	d032      	beq.n	8003d32 <__ssputs_r+0x80>
 8003ccc:	6825      	ldr	r5, [r4, #0]
 8003cce:	6909      	ldr	r1, [r1, #16]
 8003cd0:	eba5 0901 	sub.w	r9, r5, r1
 8003cd4:	6965      	ldr	r5, [r4, #20]
 8003cd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cde:	3301      	adds	r3, #1
 8003ce0:	444b      	add	r3, r9
 8003ce2:	106d      	asrs	r5, r5, #1
 8003ce4:	429d      	cmp	r5, r3
 8003ce6:	bf38      	it	cc
 8003ce8:	461d      	movcc	r5, r3
 8003cea:	0553      	lsls	r3, r2, #21
 8003cec:	d531      	bpl.n	8003d52 <__ssputs_r+0xa0>
 8003cee:	4629      	mov	r1, r5
 8003cf0:	f7fe ff12 	bl	8002b18 <_malloc_r>
 8003cf4:	4606      	mov	r6, r0
 8003cf6:	b950      	cbnz	r0, 8003d0e <__ssputs_r+0x5c>
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	f8ca 3000 	str.w	r3, [sl]
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d0e:	6921      	ldr	r1, [r4, #16]
 8003d10:	464a      	mov	r2, r9
 8003d12:	f7ff ff6b 	bl	8003bec <memcpy>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d20:	81a3      	strh	r3, [r4, #12]
 8003d22:	6126      	str	r6, [r4, #16]
 8003d24:	6165      	str	r5, [r4, #20]
 8003d26:	444e      	add	r6, r9
 8003d28:	eba5 0509 	sub.w	r5, r5, r9
 8003d2c:	6026      	str	r6, [r4, #0]
 8003d2e:	60a5      	str	r5, [r4, #8]
 8003d30:	463e      	mov	r6, r7
 8003d32:	42be      	cmp	r6, r7
 8003d34:	d900      	bls.n	8003d38 <__ssputs_r+0x86>
 8003d36:	463e      	mov	r6, r7
 8003d38:	6820      	ldr	r0, [r4, #0]
 8003d3a:	4632      	mov	r2, r6
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	f7ff ff63 	bl	8003c08 <memmove>
 8003d42:	68a3      	ldr	r3, [r4, #8]
 8003d44:	1b9b      	subs	r3, r3, r6
 8003d46:	60a3      	str	r3, [r4, #8]
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	4433      	add	r3, r6
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	2000      	movs	r0, #0
 8003d50:	e7db      	b.n	8003d0a <__ssputs_r+0x58>
 8003d52:	462a      	mov	r2, r5
 8003d54:	f7ff ff7e 	bl	8003c54 <_realloc_r>
 8003d58:	4606      	mov	r6, r0
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d1e1      	bne.n	8003d22 <__ssputs_r+0x70>
 8003d5e:	6921      	ldr	r1, [r4, #16]
 8003d60:	4650      	mov	r0, sl
 8003d62:	f7fe fe6d 	bl	8002a40 <_free_r>
 8003d66:	e7c7      	b.n	8003cf8 <__ssputs_r+0x46>

08003d68 <_svfiprintf_r>:
 8003d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d6c:	4698      	mov	r8, r3
 8003d6e:	898b      	ldrh	r3, [r1, #12]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	b09d      	sub	sp, #116	; 0x74
 8003d74:	4607      	mov	r7, r0
 8003d76:	460d      	mov	r5, r1
 8003d78:	4614      	mov	r4, r2
 8003d7a:	d50e      	bpl.n	8003d9a <_svfiprintf_r+0x32>
 8003d7c:	690b      	ldr	r3, [r1, #16]
 8003d7e:	b963      	cbnz	r3, 8003d9a <_svfiprintf_r+0x32>
 8003d80:	2140      	movs	r1, #64	; 0x40
 8003d82:	f7fe fec9 	bl	8002b18 <_malloc_r>
 8003d86:	6028      	str	r0, [r5, #0]
 8003d88:	6128      	str	r0, [r5, #16]
 8003d8a:	b920      	cbnz	r0, 8003d96 <_svfiprintf_r+0x2e>
 8003d8c:	230c      	movs	r3, #12
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d94:	e0d1      	b.n	8003f3a <_svfiprintf_r+0x1d2>
 8003d96:	2340      	movs	r3, #64	; 0x40
 8003d98:	616b      	str	r3, [r5, #20]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9e:	2320      	movs	r3, #32
 8003da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003da8:	2330      	movs	r3, #48	; 0x30
 8003daa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003f54 <_svfiprintf_r+0x1ec>
 8003dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003db2:	f04f 0901 	mov.w	r9, #1
 8003db6:	4623      	mov	r3, r4
 8003db8:	469a      	mov	sl, r3
 8003dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dbe:	b10a      	cbz	r2, 8003dc4 <_svfiprintf_r+0x5c>
 8003dc0:	2a25      	cmp	r2, #37	; 0x25
 8003dc2:	d1f9      	bne.n	8003db8 <_svfiprintf_r+0x50>
 8003dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8003dc8:	d00b      	beq.n	8003de2 <_svfiprintf_r+0x7a>
 8003dca:	465b      	mov	r3, fp
 8003dcc:	4622      	mov	r2, r4
 8003dce:	4629      	mov	r1, r5
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	f7ff ff6e 	bl	8003cb2 <__ssputs_r>
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	f000 80aa 	beq.w	8003f30 <_svfiprintf_r+0x1c8>
 8003ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dde:	445a      	add	r2, fp
 8003de0:	9209      	str	r2, [sp, #36]	; 0x24
 8003de2:	f89a 3000 	ldrb.w	r3, [sl]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80a2 	beq.w	8003f30 <_svfiprintf_r+0x1c8>
 8003dec:	2300      	movs	r3, #0
 8003dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003df6:	f10a 0a01 	add.w	sl, sl, #1
 8003dfa:	9304      	str	r3, [sp, #16]
 8003dfc:	9307      	str	r3, [sp, #28]
 8003dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e02:	931a      	str	r3, [sp, #104]	; 0x68
 8003e04:	4654      	mov	r4, sl
 8003e06:	2205      	movs	r2, #5
 8003e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e0c:	4851      	ldr	r0, [pc, #324]	; (8003f54 <_svfiprintf_r+0x1ec>)
 8003e0e:	f7fc fa07 	bl	8000220 <memchr>
 8003e12:	9a04      	ldr	r2, [sp, #16]
 8003e14:	b9d8      	cbnz	r0, 8003e4e <_svfiprintf_r+0xe6>
 8003e16:	06d0      	lsls	r0, r2, #27
 8003e18:	bf44      	itt	mi
 8003e1a:	2320      	movmi	r3, #32
 8003e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e20:	0711      	lsls	r1, r2, #28
 8003e22:	bf44      	itt	mi
 8003e24:	232b      	movmi	r3, #43	; 0x2b
 8003e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8003e30:	d015      	beq.n	8003e5e <_svfiprintf_r+0xf6>
 8003e32:	9a07      	ldr	r2, [sp, #28]
 8003e34:	4654      	mov	r4, sl
 8003e36:	2000      	movs	r0, #0
 8003e38:	f04f 0c0a 	mov.w	ip, #10
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e42:	3b30      	subs	r3, #48	; 0x30
 8003e44:	2b09      	cmp	r3, #9
 8003e46:	d94e      	bls.n	8003ee6 <_svfiprintf_r+0x17e>
 8003e48:	b1b0      	cbz	r0, 8003e78 <_svfiprintf_r+0x110>
 8003e4a:	9207      	str	r2, [sp, #28]
 8003e4c:	e014      	b.n	8003e78 <_svfiprintf_r+0x110>
 8003e4e:	eba0 0308 	sub.w	r3, r0, r8
 8003e52:	fa09 f303 	lsl.w	r3, r9, r3
 8003e56:	4313      	orrs	r3, r2
 8003e58:	9304      	str	r3, [sp, #16]
 8003e5a:	46a2      	mov	sl, r4
 8003e5c:	e7d2      	b.n	8003e04 <_svfiprintf_r+0x9c>
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	1d19      	adds	r1, r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	9103      	str	r1, [sp, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfbb      	ittet	lt
 8003e6a:	425b      	neglt	r3, r3
 8003e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8003e70:	9307      	strge	r3, [sp, #28]
 8003e72:	9307      	strlt	r3, [sp, #28]
 8003e74:	bfb8      	it	lt
 8003e76:	9204      	strlt	r2, [sp, #16]
 8003e78:	7823      	ldrb	r3, [r4, #0]
 8003e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e7c:	d10c      	bne.n	8003e98 <_svfiprintf_r+0x130>
 8003e7e:	7863      	ldrb	r3, [r4, #1]
 8003e80:	2b2a      	cmp	r3, #42	; 0x2a
 8003e82:	d135      	bne.n	8003ef0 <_svfiprintf_r+0x188>
 8003e84:	9b03      	ldr	r3, [sp, #12]
 8003e86:	1d1a      	adds	r2, r3, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	9203      	str	r2, [sp, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bfb8      	it	lt
 8003e90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003e94:	3402      	adds	r4, #2
 8003e96:	9305      	str	r3, [sp, #20]
 8003e98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f64 <_svfiprintf_r+0x1fc>
 8003e9c:	7821      	ldrb	r1, [r4, #0]
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	4650      	mov	r0, sl
 8003ea2:	f7fc f9bd 	bl	8000220 <memchr>
 8003ea6:	b140      	cbz	r0, 8003eba <_svfiprintf_r+0x152>
 8003ea8:	2340      	movs	r3, #64	; 0x40
 8003eaa:	eba0 000a 	sub.w	r0, r0, sl
 8003eae:	fa03 f000 	lsl.w	r0, r3, r0
 8003eb2:	9b04      	ldr	r3, [sp, #16]
 8003eb4:	4303      	orrs	r3, r0
 8003eb6:	3401      	adds	r4, #1
 8003eb8:	9304      	str	r3, [sp, #16]
 8003eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ebe:	4826      	ldr	r0, [pc, #152]	; (8003f58 <_svfiprintf_r+0x1f0>)
 8003ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ec4:	2206      	movs	r2, #6
 8003ec6:	f7fc f9ab 	bl	8000220 <memchr>
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d038      	beq.n	8003f40 <_svfiprintf_r+0x1d8>
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <_svfiprintf_r+0x1f4>)
 8003ed0:	bb1b      	cbnz	r3, 8003f1a <_svfiprintf_r+0x1b2>
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	3307      	adds	r3, #7
 8003ed6:	f023 0307 	bic.w	r3, r3, #7
 8003eda:	3308      	adds	r3, #8
 8003edc:	9303      	str	r3, [sp, #12]
 8003ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ee0:	4433      	add	r3, r6
 8003ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee4:	e767      	b.n	8003db6 <_svfiprintf_r+0x4e>
 8003ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eea:	460c      	mov	r4, r1
 8003eec:	2001      	movs	r0, #1
 8003eee:	e7a5      	b.n	8003e3c <_svfiprintf_r+0xd4>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	3401      	adds	r4, #1
 8003ef4:	9305      	str	r3, [sp, #20]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f04f 0c0a 	mov.w	ip, #10
 8003efc:	4620      	mov	r0, r4
 8003efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f02:	3a30      	subs	r2, #48	; 0x30
 8003f04:	2a09      	cmp	r2, #9
 8003f06:	d903      	bls.n	8003f10 <_svfiprintf_r+0x1a8>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0c5      	beq.n	8003e98 <_svfiprintf_r+0x130>
 8003f0c:	9105      	str	r1, [sp, #20]
 8003f0e:	e7c3      	b.n	8003e98 <_svfiprintf_r+0x130>
 8003f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f14:	4604      	mov	r4, r0
 8003f16:	2301      	movs	r3, #1
 8003f18:	e7f0      	b.n	8003efc <_svfiprintf_r+0x194>
 8003f1a:	ab03      	add	r3, sp, #12
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	462a      	mov	r2, r5
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <_svfiprintf_r+0x1f8>)
 8003f22:	a904      	add	r1, sp, #16
 8003f24:	4638      	mov	r0, r7
 8003f26:	f3af 8000 	nop.w
 8003f2a:	1c42      	adds	r2, r0, #1
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	d1d6      	bne.n	8003ede <_svfiprintf_r+0x176>
 8003f30:	89ab      	ldrh	r3, [r5, #12]
 8003f32:	065b      	lsls	r3, r3, #25
 8003f34:	f53f af2c 	bmi.w	8003d90 <_svfiprintf_r+0x28>
 8003f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f3a:	b01d      	add	sp, #116	; 0x74
 8003f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f40:	ab03      	add	r3, sp, #12
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	462a      	mov	r2, r5
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <_svfiprintf_r+0x1f8>)
 8003f48:	a904      	add	r1, sp, #16
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f7ff f820 	bl	8002f90 <_printf_i>
 8003f50:	e7eb      	b.n	8003f2a <_svfiprintf_r+0x1c2>
 8003f52:	bf00      	nop
 8003f54:	08004358 	.word	0x08004358
 8003f58:	08004362 	.word	0x08004362
 8003f5c:	00000000 	.word	0x00000000
 8003f60:	08003cb3 	.word	0x08003cb3
 8003f64:	0800435e 	.word	0x0800435e

08003f68 <_raise_r>:
 8003f68:	291f      	cmp	r1, #31
 8003f6a:	b538      	push	{r3, r4, r5, lr}
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	460d      	mov	r5, r1
 8003f70:	d904      	bls.n	8003f7c <_raise_r+0x14>
 8003f72:	2316      	movs	r3, #22
 8003f74:	6003      	str	r3, [r0, #0]
 8003f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f7e:	b112      	cbz	r2, 8003f86 <_raise_r+0x1e>
 8003f80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003f84:	b94b      	cbnz	r3, 8003f9a <_raise_r+0x32>
 8003f86:	4620      	mov	r0, r4
 8003f88:	f000 f830 	bl	8003fec <_getpid_r>
 8003f8c:	462a      	mov	r2, r5
 8003f8e:	4601      	mov	r1, r0
 8003f90:	4620      	mov	r0, r4
 8003f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f96:	f000 b817 	b.w	8003fc8 <_kill_r>
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d00a      	beq.n	8003fb4 <_raise_r+0x4c>
 8003f9e:	1c59      	adds	r1, r3, #1
 8003fa0:	d103      	bne.n	8003faa <_raise_r+0x42>
 8003fa2:	2316      	movs	r3, #22
 8003fa4:	6003      	str	r3, [r0, #0]
 8003fa6:	2001      	movs	r0, #1
 8003fa8:	e7e7      	b.n	8003f7a <_raise_r+0x12>
 8003faa:	2400      	movs	r4, #0
 8003fac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	4798      	blx	r3
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	e7e0      	b.n	8003f7a <_raise_r+0x12>

08003fb8 <raise>:
 8003fb8:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <raise+0xc>)
 8003fba:	4601      	mov	r1, r0
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	f7ff bfd3 	b.w	8003f68 <_raise_r>
 8003fc2:	bf00      	nop
 8003fc4:	2000002c 	.word	0x2000002c

08003fc8 <_kill_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	4d07      	ldr	r5, [pc, #28]	; (8003fe8 <_kill_r+0x20>)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4604      	mov	r4, r0
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	602b      	str	r3, [r5, #0]
 8003fd6:	f7fc ffbb 	bl	8000f50 <_kill>
 8003fda:	1c43      	adds	r3, r0, #1
 8003fdc:	d102      	bne.n	8003fe4 <_kill_r+0x1c>
 8003fde:	682b      	ldr	r3, [r5, #0]
 8003fe0:	b103      	cbz	r3, 8003fe4 <_kill_r+0x1c>
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	bd38      	pop	{r3, r4, r5, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000150 	.word	0x20000150

08003fec <_getpid_r>:
 8003fec:	f7fc bfa8 	b.w	8000f40 <_getpid>

08003ff0 <__sread>:
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff8:	f000 f89c 	bl	8004134 <_read_r>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	bfab      	itete	ge
 8004000:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004002:	89a3      	ldrhlt	r3, [r4, #12]
 8004004:	181b      	addge	r3, r3, r0
 8004006:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800400a:	bfac      	ite	ge
 800400c:	6563      	strge	r3, [r4, #84]	; 0x54
 800400e:	81a3      	strhlt	r3, [r4, #12]
 8004010:	bd10      	pop	{r4, pc}

08004012 <__swrite>:
 8004012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004016:	461f      	mov	r7, r3
 8004018:	898b      	ldrh	r3, [r1, #12]
 800401a:	05db      	lsls	r3, r3, #23
 800401c:	4605      	mov	r5, r0
 800401e:	460c      	mov	r4, r1
 8004020:	4616      	mov	r6, r2
 8004022:	d505      	bpl.n	8004030 <__swrite+0x1e>
 8004024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004028:	2302      	movs	r3, #2
 800402a:	2200      	movs	r2, #0
 800402c:	f000 f868 	bl	8004100 <_lseek_r>
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004036:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800403a:	81a3      	strh	r3, [r4, #12]
 800403c:	4632      	mov	r2, r6
 800403e:	463b      	mov	r3, r7
 8004040:	4628      	mov	r0, r5
 8004042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004046:	f000 b817 	b.w	8004078 <_write_r>

0800404a <__sseek>:
 800404a:	b510      	push	{r4, lr}
 800404c:	460c      	mov	r4, r1
 800404e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004052:	f000 f855 	bl	8004100 <_lseek_r>
 8004056:	1c43      	adds	r3, r0, #1
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	bf15      	itete	ne
 800405c:	6560      	strne	r0, [r4, #84]	; 0x54
 800405e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004062:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004066:	81a3      	strheq	r3, [r4, #12]
 8004068:	bf18      	it	ne
 800406a:	81a3      	strhne	r3, [r4, #12]
 800406c:	bd10      	pop	{r4, pc}

0800406e <__sclose>:
 800406e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004072:	f000 b813 	b.w	800409c <_close_r>
	...

08004078 <_write_r>:
 8004078:	b538      	push	{r3, r4, r5, lr}
 800407a:	4d07      	ldr	r5, [pc, #28]	; (8004098 <_write_r+0x20>)
 800407c:	4604      	mov	r4, r0
 800407e:	4608      	mov	r0, r1
 8004080:	4611      	mov	r1, r2
 8004082:	2200      	movs	r2, #0
 8004084:	602a      	str	r2, [r5, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	f7fc ff99 	bl	8000fbe <_write>
 800408c:	1c43      	adds	r3, r0, #1
 800408e:	d102      	bne.n	8004096 <_write_r+0x1e>
 8004090:	682b      	ldr	r3, [r5, #0]
 8004092:	b103      	cbz	r3, 8004096 <_write_r+0x1e>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	20000150 	.word	0x20000150

0800409c <_close_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4d06      	ldr	r5, [pc, #24]	; (80040b8 <_close_r+0x1c>)
 80040a0:	2300      	movs	r3, #0
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	602b      	str	r3, [r5, #0]
 80040a8:	f7fc ffa5 	bl	8000ff6 <_close>
 80040ac:	1c43      	adds	r3, r0, #1
 80040ae:	d102      	bne.n	80040b6 <_close_r+0x1a>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	b103      	cbz	r3, 80040b6 <_close_r+0x1a>
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd38      	pop	{r3, r4, r5, pc}
 80040b8:	20000150 	.word	0x20000150

080040bc <_fstat_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d07      	ldr	r5, [pc, #28]	; (80040dc <_fstat_r+0x20>)
 80040c0:	2300      	movs	r3, #0
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	f7fc ffa0 	bl	800100e <_fstat>
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	d102      	bne.n	80040d8 <_fstat_r+0x1c>
 80040d2:	682b      	ldr	r3, [r5, #0]
 80040d4:	b103      	cbz	r3, 80040d8 <_fstat_r+0x1c>
 80040d6:	6023      	str	r3, [r4, #0]
 80040d8:	bd38      	pop	{r3, r4, r5, pc}
 80040da:	bf00      	nop
 80040dc:	20000150 	.word	0x20000150

080040e0 <_isatty_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d06      	ldr	r5, [pc, #24]	; (80040fc <_isatty_r+0x1c>)
 80040e4:	2300      	movs	r3, #0
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	f7fc ff9f 	bl	800102e <_isatty>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_isatty_r+0x1a>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_isatty_r+0x1a>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	20000150 	.word	0x20000150

08004100 <_lseek_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	; (8004120 <_lseek_r+0x20>)
 8004104:	4604      	mov	r4, r0
 8004106:	4608      	mov	r0, r1
 8004108:	4611      	mov	r1, r2
 800410a:	2200      	movs	r2, #0
 800410c:	602a      	str	r2, [r5, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	f7fc ff98 	bl	8001044 <_lseek>
 8004114:	1c43      	adds	r3, r0, #1
 8004116:	d102      	bne.n	800411e <_lseek_r+0x1e>
 8004118:	682b      	ldr	r3, [r5, #0]
 800411a:	b103      	cbz	r3, 800411e <_lseek_r+0x1e>
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	bd38      	pop	{r3, r4, r5, pc}
 8004120:	20000150 	.word	0x20000150

08004124 <_malloc_usable_size_r>:
 8004124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004128:	1f18      	subs	r0, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	bfbc      	itt	lt
 800412e:	580b      	ldrlt	r3, [r1, r0]
 8004130:	18c0      	addlt	r0, r0, r3
 8004132:	4770      	bx	lr

08004134 <_read_r>:
 8004134:	b538      	push	{r3, r4, r5, lr}
 8004136:	4d07      	ldr	r5, [pc, #28]	; (8004154 <_read_r+0x20>)
 8004138:	4604      	mov	r4, r0
 800413a:	4608      	mov	r0, r1
 800413c:	4611      	mov	r1, r2
 800413e:	2200      	movs	r2, #0
 8004140:	602a      	str	r2, [r5, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	f7fc ff1e 	bl	8000f84 <_read>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <_read_r+0x1e>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	b103      	cbz	r3, 8004152 <_read_r+0x1e>
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	20000150 	.word	0x20000150

08004158 <_init>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	bf00      	nop
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr

08004164 <_fini>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	bf00      	nop
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr
